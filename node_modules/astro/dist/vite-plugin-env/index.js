import MagicString from "magic-string";
import { fileURLToPath } from "url";
import { loadEnv } from "vite";
function getPrivateEnv(viteConfig, astroConfig) {
  let envPrefixes = ["PUBLIC_"];
  if (viteConfig.envPrefix) {
    envPrefixes = Array.isArray(viteConfig.envPrefix) ? viteConfig.envPrefix : [viteConfig.envPrefix];
  }
  const fullEnv = loadEnv(viteConfig.mode, viteConfig.envDir ?? fileURLToPath(astroConfig.projectRoot), "");
  const privateKeys = Object.keys(fullEnv).filter((key) => {
    if (typeof process.env[key] !== "undefined")
      return false;
    for (const envPrefix of envPrefixes) {
      if (key.startsWith(envPrefix))
        return false;
    }
    return true;
  });
  if (privateKeys.length === 0) {
    return null;
  }
  return Object.fromEntries(privateKeys.map((key) => [key, JSON.stringify(fullEnv[key])]));
}
function referencesPrivateKey(source, privateEnv) {
  for (const key of Object.keys(privateEnv)) {
    if (source.includes(key))
      return true;
  }
  return false;
}
function envVitePlugin({ config: astroConfig }) {
  let privateEnv;
  let config;
  let replacements;
  let pattern;
  return {
    name: "astro:vite-plugin-env",
    enforce: "pre",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
    },
    async transform(source, id, options) {
      const ssr = (options == null ? void 0 : options.ssr) === true;
      if (!ssr) {
        return source;
      }
      if (!source.includes("import.meta") || !/\benv\b/.test(source)) {
        return source;
      }
      if (typeof privateEnv === "undefined") {
        privateEnv = getPrivateEnv(config, astroConfig);
        if (privateEnv) {
          const entries = Object.entries(privateEnv).map(([key, value]) => [`import.meta.env.${key}`, value]);
          replacements = Object.fromEntries(entries);
          pattern = new RegExp("(?<!(?<!\\.\\.)\\.)\\b(" + Object.keys(replacements).map((str) => {
            return str.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
          }).join("|") + ")\\b(?!\\s*?=[^=])", "g");
        }
      }
      if (!privateEnv || !pattern)
        return source;
      if (!referencesPrivateKey(source, privateEnv))
        return source;
      const s = new MagicString(source);
      let match;
      while (match = pattern.exec(source)) {
        const start = match.index;
        const end = start + match[0].length;
        const replacement = "" + replacements[match[1]];
        s.overwrite(start, end, replacement);
      }
      return s.toString();
    }
  };
}
export {
  envVitePlugin as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWVudi9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQU1BLHVCQUF1QixZQUFpQyxhQUEwQjtBQUNqRixNQUFJLGNBQXdCLENBQUMsU0FBUztBQUN0QyxNQUFJLFdBQVcsV0FBVztBQUN6QixrQkFBYyxNQUFNLFFBQVEsV0FBVyxTQUFTLElBQUksV0FBVyxZQUFZLENBQUMsV0FBVyxTQUFTO0FBQUEsRUFDakc7QUFDQSxRQUFNLFVBQVUsUUFBUSxXQUFXLE1BQU0sV0FBVyxVQUFVLGNBQWMsWUFBWSxXQUFXLEdBQUcsRUFBRTtBQUN4RyxRQUFNLGNBQWMsT0FBTyxLQUFLLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUTtBQUd4RCxRQUFJLE9BQU8sUUFBUSxJQUFJLFNBQVM7QUFBYSxhQUFPO0FBR3BELGVBQVcsYUFBYSxhQUFhO0FBQ3BDLFVBQUksSUFBSSxXQUFXLFNBQVM7QUFBRyxlQUFPO0FBQUEsSUFDdkM7QUFHQSxXQUFPO0FBQUEsRUFDUixDQUFDO0FBQ0QsTUFBSSxZQUFZLFdBQVcsR0FBRztBQUM3QixXQUFPO0FBQUEsRUFDUjtBQUNBLFNBQU8sT0FBTyxZQUFZLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEtBQUssVUFBVSxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDeEY7QUFFQSw4QkFBOEIsUUFBZ0IsWUFBaUM7QUFDOUUsYUFBVyxPQUFPLE9BQU8sS0FBSyxVQUFVLEdBQUc7QUFDMUMsUUFBSSxPQUFPLFNBQVMsR0FBRztBQUFHLGFBQU87QUFBQSxFQUNsQztBQUNBLFNBQU87QUFDUjtBQUVlLHVCQUF1QixFQUFFLFFBQVEsZUFBb0Q7QUFDbkcsTUFBSTtBQUNKLE1BQUk7QUFDSixNQUFJO0FBQ0osTUFBSTtBQUNKLFNBQU87QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFNBQVM7QUFBQSxJQUNULGVBQWUsZ0JBQWdCO0FBQzlCLGVBQVM7QUFBQSxJQUNWO0FBQUEsVUFDTSxVQUFVLFFBQVEsSUFBSSxTQUFTO0FBQ3BDLFlBQU0sTUFBTSxvQ0FBUyxTQUFRO0FBRTdCLFVBQUksQ0FBQyxLQUFLO0FBQ1QsZUFBTztBQUFBLE1BQ1I7QUFFQSxVQUFJLENBQUMsT0FBTyxTQUFTLGFBQWEsS0FBSyxDQUFDLFVBQVUsS0FBSyxNQUFNLEdBQUc7QUFDL0QsZUFBTztBQUFBLE1BQ1I7QUFFQSxVQUFJLE9BQU8sZUFBZSxhQUFhO0FBQ3RDLHFCQUFhLGNBQWMsUUFBUSxXQUFXO0FBQzlDLFlBQUksWUFBWTtBQUNmLGdCQUFNLFVBQVUsT0FBTyxRQUFRLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxtQkFBbUIsT0FBTyxLQUFLLENBQUM7QUFDbEcseUJBQWUsT0FBTyxZQUFZLE9BQU87QUFDekMsb0JBQVUsSUFBSSxPQUViLDRCQUNDLE9BQU8sS0FBSyxZQUFZLEVBQ3RCLElBQUksQ0FBQyxRQUFRO0FBQ2IsbUJBQU8sSUFBSSxRQUFRLHlCQUF5QixNQUFNO0FBQUEsVUFDbkQsQ0FBQyxFQUNBLEtBQUssR0FBRyxJQUVWLHNCQUNELEdBQ0Q7QUFBQSxRQUNEO0FBQUEsTUFDRDtBQUVBLFVBQUksQ0FBQyxjQUFjLENBQUM7QUFBUyxlQUFPO0FBQ3BDLFVBQUksQ0FBQyxxQkFBcUIsUUFBUSxVQUFVO0FBQUcsZUFBTztBQUd0RCxZQUFNLElBQUksSUFBSSxZQUFZLE1BQU07QUFDaEMsVUFBSTtBQUVKLGFBQVEsUUFBUSxRQUFRLEtBQUssTUFBTSxHQUFJO0FBQ3RDLGNBQU0sUUFBUSxNQUFNO0FBQ3BCLGNBQU0sTUFBTSxRQUFRLE1BQU0sR0FBRztBQUM3QixjQUFNLGNBQWMsS0FBSyxhQUFhLE1BQU07QUFDNUMsVUFBRSxVQUFVLE9BQU8sS0FBSyxXQUFXO0FBQUEsTUFDcEM7QUFFQSxhQUFPLEVBQUUsU0FBUztBQUFBLElBQ25CO0FBQUEsRUFDRDtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
