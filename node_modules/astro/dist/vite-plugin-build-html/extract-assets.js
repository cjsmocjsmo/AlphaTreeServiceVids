import npath from "path";
import { findElements, getTagName, getAttribute, findNodes, hasAttribute } from "@web/parse5-utils";
import adapter from "parse5/lib/tree-adapters/default.js";
const hashedLinkRels = ["stylesheet", "preload"];
const linkRels = [...hashedLinkRels, "icon", "manifest", "apple-touch-icon", "mask-icon"];
const windowsPathRE = /^[A-Z]:\//;
function getSrcSetUrls(srcset) {
  if (!srcset) {
    return [];
  }
  const srcsetParts = srcset.includes(",") ? srcset.split(",") : [srcset];
  const urls = srcsetParts.map((url) => url.trim()).map((url) => url.includes(" ") ? url.split(" ")[0] : url);
  return urls;
}
function extractFirstUrlOfSrcSet(node) {
  const srcset = getAttribute(node, "srcset");
  if (!srcset) {
    return "";
  }
  const urls = getSrcSetUrls(srcset);
  return urls[0];
}
function isAsset(node) {
  let path = "";
  switch (getTagName(node)) {
    case "img":
      path = getAttribute(node, "src") ?? "";
      break;
    case "source":
      path = extractFirstUrlOfSrcSet(node) ?? "";
      break;
    case "link":
      if (linkRels.includes(getAttribute(node, "rel") ?? "")) {
        path = getAttribute(node, "href") ?? "";
      }
      break;
    case "meta":
      if (getAttribute(node, "property") === "og:image" && getAttribute(node, "content")) {
        path = getAttribute(node, "content") ?? "";
      }
      break;
    case "script":
      if (getAttribute(node, "type") !== "module" && getAttribute(node, "src")) {
        path = getAttribute(node, "src") ?? "";
      }
      break;
    default:
      return false;
  }
  if (!path) {
    return false;
  }
  if (windowsPathRE.test(path)) {
    return true;
  }
  try {
    new URL(path);
    return false;
  } catch (e) {
    return true;
  }
}
function isInlineScript(node) {
  switch (getTagName(node)) {
    case "script":
      if (getAttribute(node, "type") === "module" && !getAttribute(node, "src")) {
        return true;
      }
      return false;
    default:
      return false;
  }
}
function isExternalScript(node) {
  switch (getTagName(node)) {
    case "script":
      if (hasAttribute(node, "src")) {
        return true;
      }
      return false;
    default:
      return false;
  }
}
function isInlineStyle(node) {
  return getTagName(node) === "style";
}
function isStylesheetLink(node) {
  return getTagName(node) === "link" && getAttribute(node, "rel") === "stylesheet";
}
function isHashedAsset(node) {
  switch (getTagName(node)) {
    case "img":
      return true;
    case "source":
      return true;
    case "script":
      return true;
    case "link":
      return hashedLinkRels.includes(getAttribute(node, "rel"));
    case "meta":
      return true;
    default:
      return false;
  }
}
function resolveAssetFilePath(browserPath, htmlDir, projectRootDir, absolutePathPrefix) {
  const _browserPath = absolutePathPrefix && browserPath[0] === "/" ? "/" + npath.posix.relative(absolutePathPrefix, browserPath) : browserPath;
  return npath.join(_browserPath.startsWith("/") ? projectRootDir : htmlDir, _browserPath.split("/").join(npath.sep));
}
function getSourceAttribute(node) {
  switch (getTagName(node)) {
    case "img": {
      return "src";
    }
    case "source": {
      return "srcset";
    }
    case "link": {
      return "href";
    }
    case "script": {
      return "src";
    }
    case "meta": {
      return "content";
    }
    default:
      throw new Error(`Unknown node with tagname ${getTagName(node)}`);
  }
}
function getSourcePaths(node) {
  var _a;
  const key = getSourceAttribute(node);
  let location = { start: 0, end: 0 };
  const src = getAttribute(node, key);
  if (node.sourceCodeLocation) {
    let loc = (_a = node.sourceCodeLocation.attrs) == null ? void 0 : _a[key];
    if (loc) {
      location.start = loc.startOffset;
      location.end = loc.endOffset;
    }
  }
  if (typeof key !== "string" || src === "") {
    throw new Error(`Missing attribute ${key} in element ${node.nodeName}`);
  }
  let paths = [];
  if (src && key === "srcset") {
    paths = getSrcSetUrls(src).map((path) => ({
      path,
      location
    }));
  } else if (src) {
    paths.push({
      path: src,
      location
    });
  }
  return paths;
}
function getTextContent(node) {
  if (adapter.isCommentNode(node)) {
    return node.data || "";
  }
  if (adapter.isTextNode(node)) {
    return node.value || "";
  }
  const subtree = findNodes(node, (n) => adapter.isTextNode(n));
  return subtree.map(getTextContent).join("");
}
function getAttributes(node) {
  return Object.fromEntries(node.attrs.map((attr) => [attr.name, attr.value]));
}
function findAssets(document) {
  return findElements(document, isAsset);
}
function findInlineScripts(document) {
  return findElements(document, isInlineScript);
}
function findExternalScripts(document) {
  return findElements(document, isExternalScript);
}
function findInlineStyles(document) {
  return findElements(document, isInlineStyle);
}
function findStyleLinks(document) {
  return findElements(document, isStylesheetLink);
}
export {
  findAssets,
  findExternalScripts,
  findInlineScripts,
  findInlineStyles,
  findStyleLinks,
  getAttributes,
  getSourceAttribute,
  getSourcePaths,
  getTextContent,
  isHashedAsset,
  isStylesheetLink,
  resolveAssetFilePath
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWJ1aWxkLWh0bWwvZXh0cmFjdC1hc3NldHMudHMiXSwKICAibWFwcGluZ3MiOiAiQUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNLGlCQUFpQixDQUFDLGNBQWMsU0FBUztBQUMvQyxNQUFNLFdBQVcsQ0FBQyxHQUFHLGdCQUFnQixRQUFRLFlBQVksb0JBQW9CLFdBQVc7QUFDeEYsTUFBTSxnQkFBZ0I7QUFFdEIsdUJBQXVCLFFBQWdCO0FBQ3RDLE1BQUksQ0FBQyxRQUFRO0FBQ1osV0FBTyxDQUFDO0FBQUEsRUFDVDtBQUNBLFFBQU0sY0FBYyxPQUFPLFNBQVMsR0FBRyxJQUFJLE9BQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNO0FBQ3RFLFFBQU0sT0FBTyxZQUFZLElBQUksQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVMsSUFBSSxTQUFTLEdBQUcsSUFBSSxJQUFJLE1BQU0sR0FBRyxFQUFFLEtBQUssR0FBSTtBQUM1RyxTQUFPO0FBQ1I7QUFFQSxpQ0FBaUMsTUFBZTtBQUMvQyxRQUFNLFNBQVMsYUFBYSxNQUFNLFFBQVE7QUFDMUMsTUFBSSxDQUFDLFFBQVE7QUFDWixXQUFPO0FBQUEsRUFDUjtBQUNBLFFBQU0sT0FBTyxjQUFjLE1BQU07QUFDakMsU0FBTyxLQUFLO0FBQ2I7QUFFQSxpQkFBaUIsTUFBZTtBQUMvQixNQUFJLE9BQU87QUFDWCxVQUFRLFdBQVcsSUFBSTtBQUFBLFNBQ2pCO0FBQ0osYUFBTyxhQUFhLE1BQU0sS0FBSyxLQUFLO0FBQ3BDO0FBQUEsU0FDSTtBQUNKLGFBQU8sd0JBQXdCLElBQUksS0FBSztBQUN4QztBQUFBLFNBQ0k7QUFDSixVQUFJLFNBQVMsU0FBUyxhQUFhLE1BQU0sS0FBSyxLQUFLLEVBQUUsR0FBRztBQUN2RCxlQUFPLGFBQWEsTUFBTSxNQUFNLEtBQUs7QUFBQSxNQUN0QztBQUNBO0FBQUEsU0FDSTtBQUNKLFVBQUksYUFBYSxN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
