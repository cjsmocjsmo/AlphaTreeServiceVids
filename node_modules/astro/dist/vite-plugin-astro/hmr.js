import { invalidateCompilation, isCached } from "./compile.js";
import { info } from "../core/logger.js";
import * as msg from "../core/messages.js";
async function trackCSSDependencies(opts) {
  const { viteDevServer, filename, deps, id } = opts;
  if (viteDevServer) {
    const mod = viteDevServer.moduleGraph.getModuleById(id);
    if (mod) {
      const cssDeps = (await Promise.all(Array.from(deps).map((spec) => {
        return this.resolve(spec, id);
      }))).filter(Boolean).map((dep) => dep.id);
      const { moduleGraph } = viteDevServer;
      const depModules = new Set(mod.importedModules);
      for (const dep of cssDeps) {
        depModules.add(moduleGraph.createFileOnlyEntry(dep));
      }
      moduleGraph.updateModuleInfo(mod, depModules, /* @__PURE__ */ new Set(), true);
      for (const dep of cssDeps) {
        this.addWatchFile(dep);
      }
    }
  }
}
async function handleHotUpdate(ctx, config, logging) {
  var _a;
  invalidateCompilation(config, ctx.file);
  const filtered = new Set(ctx.modules);
  const files = /* @__PURE__ */ new Set();
  for (const mod2 of ctx.modules) {
    if ((_a = mod2.id) == null ? void 0 : _a.endsWith(".astro?html-proxy&index=0.js")) {
      filtered.delete(mod2);
      continue;
    }
    if (mod2.file && isCached(config, mod2.file)) {
      filtered.add(mod2);
      files.add(mod2.file);
    }
    for (const imp of mod2.importers) {
      if (imp.file && isCached(config, imp.file)) {
        filtered.add(imp);
        files.add(imp.file);
      }
    }
  }
  for (const file2 of files) {
    invalidateCompilation(config, file2);
  }
  const mod = ctx.modules.find((m) => m.file === ctx.file);
  const file = ctx.file.replace(config.projectRoot.pathname, "/");
  if (ctx.file.endsWith(".astro")) {
    ctx.server.ws.send({ type: "custom", event: "astro:update", data: { file } });
  }
  if (mod == null ? void 0 : mod.isSelfAccepting) {
    info(logging, "astro", msg.hmr({ file }));
  } else {
    info(logging, "astro", msg.reload({ file }));
  }
  return Array.from(filtered);
}
export {
  handleHotUpdate,
  trackCSSDependencies
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvL2htci50cyJdLAogICJtYXBwaW5ncyI6ICJBQUlBO0FBQ0E7QUFDQTtBQVNBLG9DQUFzRSxNQUFrRDtBQUN2SCxRQUFNLEVBQUUsZUFBZSxVQUFVLE1BQU0sT0FBTztBQUU5QyxNQUFJLGVBQWU7QUFDbEIsVUFBTSxNQUFNLGNBQWMsWUFBWSxjQUFjLEVBQUU7QUFDdEQsUUFBSSxLQUFLO0FBQ1IsWUFBTSxVQUNMLE9BQU0sUUFBUSxJQUNiLE1BQU0sS0FBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVM7QUFDOUIsZUFBTyxLQUFLLFFBQVEsTUFBTSxFQUFFO0FBQUEsTUFDN0IsQ0FBQyxDQUNGLEdBRUMsT0FBTyxPQUFPLEVBQ2QsSUFBSSxDQUFDLFFBQVMsSUFBbUIsRUFBRTtBQUVyQyxZQUFNLEVBQUUsZ0JBQWdCO0FBR3hCLFlBQU0sYUFBYSxJQUFJLElBQUksSUFBSSxlQUFlO0FBQzlDLGlCQUFXLE9BQU8sU0FBUztBQUMxQixtQkFBVyxJQUFJLFlBQVksb0JBQW9CLEdBQUcsQ0FBQztBQUFBLE1BQ3BEO0FBR0Esa0JBQVksaUJBQWlCLEtBQUssWUFBWSxvQkFBSSxJQUFJLEdBQUcsSUFBSTtBQUM3RCxpQkFBVyxPQUFPLFNBQVM7QUFDMUIsYUFBSyxhQUFhLEdBQUc7QUFBQSxNQUN0QjtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQ0Q7QUFFQSwrQkFBc0MsS0FBaUIsUUFBcUIsU0FBcUI7QUFoRGpHO0FBa0RDLHdCQUFzQixRQUFRLElBQUksSUFBSTtBQUl0QyxRQUFNLFdBQVcsSUFBSSxJQUFnQixJQUFJLE9BQU87QUFDaEQsUUFBTSxRQUFRLG9CQUFJLElBQVk7QUFDOUIsYUFBVyxRQUFPLElBQUksU0FBUztBQUc5QixRQUFJLFdBQUksT0FBSixtQkFBUSxTQUFTLGlDQUFpQztBQUNyRCxlQUFTLE9BQU8sSUFBRztBQUNuQjtBQUFBLElBQ0Q7QUFDQSxRQUFJLEtBQUksUUFBUSxTQUFTLFFBQVEsS0FBSSxJQUFJLEdBQUc7QUFDM0MsZUFBUyxJQUFJLElBQUc7QUFDaEIsWUFBTSxJQUFJLEtBQUksSUFBSTtBQUFBLElBQ25CO0FBQ0EsZUFBVyxPQUFPLEtBQUksV0FBVztBQUNoQyxVQUFJLElBQUksUUFBUSxTQUFTLFFBQVEsSUFBSSxJQUFJLEdBQUc7QUFDM0MsaUJBQVMsSUFBSSxHQUFHO0FBQ2hCLGNBQU0sSUFBSSxJQUFJLElBQUk7QUFBQSxNQUNuQjtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBSUEsYUFBVyxTQUFRLE9BQU87QUFDekIsMEJBQXNCLFFBQVEsS0FBSTtBQUFBLEVBQ25DO0FBRUEsUUFBTSxNQUFNLElBQUksUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsSUFBSSxJQUFJO0FBQ3ZELFFBQU0sT0FBTyxJQUFJLEtBQUssUUFBUSxPQUFPLFlBQVksVUFBVSxHQUFHO0FBQzlELE1BQUksSUFBSSxLQUFLLFNBQVMsUUFBUSxHQUFHO0FBQ2hDLFFBQUksT0FBTyxHQUFHLEtBQUssRUFBRSxNQUFNLFVBQVUsT0FBTyxnQkFBZ0IsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBQUEsRUFDN0U7QUFDQSxNQUFJLDJCQUFLLGlCQUFpQjtBQUN6QixTQUFLLFNBQVMsU0FBUyxJQUFJLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLEVBQ3pDLE9BQU87QUFDTixTQUFLLFNBQVMsU0FBUyxJQUFJLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLEVBQzVDO0FBQ0EsU0FBTyxNQUFNLEtBQUssUUFBUTtBQUMzQjsiLAogICJuYW1lcyI6IFtdCn0K
