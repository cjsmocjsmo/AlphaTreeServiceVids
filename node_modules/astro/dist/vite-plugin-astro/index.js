import esbuild from "esbuild";
import { fileURLToPath } from "url";
import slash from "slash";
import { getViteTransform } from "./styles.js";
import { parseAstroRequest } from "./query.js";
import { cachedCompilation } from "./compile.js";
import ancestor from "common-ancestor-path";
import { trackCSSDependencies, handleHotUpdate } from "./hmr.js";
import { isRelativePath, startsWithForwardSlash } from "../core/path.js";
const FRONTMATTER_PARSE_REGEXP = /^\-\-\-(.*)^\-\-\-/ms;
function astro({ config, logging }) {
  function normalizeFilename(filename) {
    if (filename.startsWith("/@fs")) {
      filename = filename.slice("/@fs".length);
    } else if (filename.startsWith("/") && !ancestor(filename, config.projectRoot.pathname)) {
      filename = new URL("." + filename, config.projectRoot).pathname;
    }
    return filename;
  }
  function relativeToRoot(pathname) {
    const arg = startsWithForwardSlash(pathname) ? "." + pathname : pathname;
    const url = new URL(arg, config.projectRoot);
    return slash(fileURLToPath(url)) + url.search;
  }
  let isProduction;
  let viteTransform;
  let viteDevServer = null;
  const srcRootWeb = config.src.pathname.slice(config.projectRoot.pathname.length - 1);
  const isBrowserPath = (path) => path.startsWith(srcRootWeb);
  return {
    name: "astro:build",
    enforce: "pre",
    configResolved(resolvedConfig) {
      viteTransform = getViteTransform(resolvedConfig);
      isProduction = resolvedConfig.isProduction;
    },
    configureServer(server) {
      viteDevServer = server;
    },
    async resolveId(id, from) {
      if (from) {
        const { query: fromQuery, filename } = parseAstroRequest(from);
        if (fromQuery.astro && isRelativePath(id) && fromQuery.type === "script") {
          const resolvedURL = new URL(id, `file://${filename}`);
          const resolved = resolvedURL.pathname;
          if (isBrowserPath(resolved)) {
            return relativeToRoot(resolved + resolvedURL.search);
          }
          return slash(fileURLToPath(resolvedURL)) + resolvedURL.search;
        }
      }
      const { query } = parseAstroRequest(id);
      if (query.astro) {
        if (query.type === "style" && isBrowserPath(id)) {
          return relativeToRoot(id);
        }
        return id;
      }
    },
    async load(id, opts) {
      let { filename, query } = parseAstroRequest(id);
      if (query.astro) {
        if (query.type === "style") {
          if (filename.startsWith("/@fs")) {
            filename = filename.slice("/@fs".length);
          } else if (filename.startsWith("/") && !ancestor(filename, config.projectRoot.pathname)) {
            filename = new URL("." + filename, config.projectRoot).pathname;
          }
          if (typeof query.index === "undefined") {
            throw new Error(`Requests for Astro CSS must include an index.`);
          }
          const transformResult = await cachedCompilation(config, normalizeFilename(filename), null, viteTransform, { ssr: Boolean(opts == null ? void 0 : opts.ssr) });
          await trackCSSDependencies.call(this, { viteDevServer, id, filename, deps: transformResult.rawCSSDeps });
          const csses = transformResult.css;
          const code = csses[query.index];
          return {
            code
          };
        } else if (query.type === "script") {
          if (typeof query.index === "undefined") {
            throw new Error(`Requests for hoisted scripts must include an index`);
          }
          const transformResult = await cachedCompilation(config, normalizeFilename(filename), null, viteTransform, { ssr: Boolean(opts == null ? void 0 : opts.ssr) });
          const scripts = transformResult.scripts;
          const hoistedScript = scripts[query.index];
          if (!hoistedScript) {
            throw new Error(`No hoisted script at index ${query.index}`);
          }
          return {
            code: hoistedScript.type === "inline" ? hoistedScript.code : `import "${hoistedScript.src}";`
          };
        }
      }
      return null;
    },
    async transform(source, id, opts) {
      if (!id.endsWith(".astro")) {
        return;
      }
      try {
        const transformResult = await cachedCompilation(config, id, source, viteTransform, { ssr: Boolean(opts == null ? void 0 : opts.ssr) });
        const { code, map } = await esbuild.transform(transformResult.code, {
          loader: "ts",
          sourcemap: "external",
          sourcefile: id
        });
        const SUFFIX = isProduction ? "" : `
if (import.meta.hot) import.meta.hot.accept((mod) => mod);`;
        return {
          code: `${code}${SUFFIX}`,
          map
        };
      } catch (err) {
        const scannedFrontmatter = FRONTMATTER_PARSE_REGEXP.exec(source);
        if (scannedFrontmatter) {
          try {
            await esbuild.transform(scannedFrontmatter[1], { loader: "ts", sourcemap: false, sourcefile: id });
          } catch (frontmatterErr) {
            if (frontmatterErr && frontmatterErr.message) {
              frontmatterErr.message = frontmatterErr.message.replace("end of file", "end of frontmatter");
            }
            throw frontmatterErr;
          }
        }
        if (err.stack.includes("wasm-function")) {
          const search = new URLSearchParams({
            labels: "compiler",
            title: "\u{1F41B} BUG: `@astrojs/compiler` panic",
            body: `### Describe the Bug
    
    \`@astrojs/compiler\` encountered an unrecoverable error when compiling the following file.
    
    **${id.replace(fileURLToPath(config.projectRoot), "")}**
    \`\`\`astro
    ${source}
    \`\`\`
    `
          });
          err.url = `https://github.com/withastro/astro/issues/new?${search.toString()}`;
          err.message = `Error: Uh oh, the Astro compiler encountered an unrecoverable error!
    
    Please open
    a GitHub issue using the link below:
    ${err.url}`;
          if (logging.level !== "debug") {
            err.stack = `    at ${id}`;
          }
        }
        throw err;
      }
    },
    async handleHotUpdate(context) {
      if (context.server.config.isProduction)
        return;
      return handleHotUpdate(context, config, logging);
    }
  };
}
export {
  astro as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvL2luZGV4LnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTSwyQkFBMkI7QUFPbEIsZUFBZSxFQUFFLFFBQVEsV0FBNEM7QUFDbkYsNkJBQTJCLFVBQWtCO0FBQzVDLFFBQUksU0FBUyxXQUFXLE1BQU0sR0FBRztBQUNoQyxpQkFBVyxTQUFTLE1BQU0sT0FBTyxNQUFNO0FBQUEsSUFDeEMsV0FBVyxTQUFTLFdBQVcsR0FBRyxLQUFLLENBQUMsU0FBUyxVQUFVLE9BQU8sWUFBWSxRQUFRLEdBQUc7QUFDeEYsaUJBQVcsSUFBSSxJQUFJLE1BQU0sVUFBVSxPQUFPLFdBQVcsRUFBRTtBQUFBLElBQ3hEO0FBQ0EsV0FBTztBQUFBLEVBQ1I7QUFDQSwwQkFBd0IsVUFBa0I7QUFDekMsVUFBTSxNQUFNLHVCQUF1QixRQUFRLElBQUksTUFBTSxXQUFXO0FBQ2hFLFVBQU0sTUFBTSxJQUFJLElBQUksS0FBSyxPQUFPLFdBQVc7QUFDM0MsV0FBTyxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQUksSUFBSTtBQUFBLEVBQ3hDO0FBRUEsTUFBSTtBQUNKLE1BQUk7QUFDSixNQUFJLGdCQUEyQztBQUcvQyxRQUFNLGFBQWEsT0FBTyxJQUFJLFNBQVMsTUFBTSxPQUFPLFlBQVksU0FBUyxTQUFTLENBQUM7QUFDbkYsUUFBTSxnQkFBZ0IsQ0FBQyxTQUFpQixLQUFLLFdBQVcsVUFBVTtBQUVsRSxTQUFPO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFDVCxlQUFlLGdCQUFnQjtBQUM5QixzQkFBZ0IsaUJBQWlCLGNBQWM7QUFDL0MscUJBQWUsZUFBZTtBQUFBLElBQy9CO0FBQUEsSUFDQSxnQkFBZ0IsUUFBUTtBQUN2QixzQkFBZ0I7QUFBQSxJQUNqQjtBQUFBLFVBRU0sVUFBVSxJQUFJLE1BQU07QUFHekIsVUFB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
