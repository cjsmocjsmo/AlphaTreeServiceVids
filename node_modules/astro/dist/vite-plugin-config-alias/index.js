var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import * as tsr from "tsconfig-resolver";
import * as path from "path";
import * as url from "url";
const normalize = (pathname) => String(pathname).split(path.sep).join(path.posix.sep);
const getExistingConfig = (searchName, cwd) => {
  const config = tsr.tsconfigResolverSync({ cwd, searchName });
  return config.exists ? config : null;
};
const getConfigAlias = (cwd) => {
  const config = getExistingConfig("tsconfig.json", cwd) || getExistingConfig("jsconfig.json", cwd);
  if (!config)
    return null;
  const compilerOptions = Object(config.config.compilerOptions);
  if (!compilerOptions.baseUrl)
    return null;
  const baseUrl = path.posix.resolve(path.posix.dirname(normalize(config.path).replace(/^\/?/, "/")), normalize(compilerOptions.baseUrl));
  const aliases = [];
  for (let [alias, values] of Object.entries(Object(compilerOptions.paths))) {
    values = [].concat(values);
    const find = new RegExp(`^${[...alias].map((segment) => segment === "*" ? "(.+)" : segment.replace(/[\\^$*+?.()|[\]{}]/, "\\$&")).join("")}$`);
    let matchId = 0;
    for (let value of values) {
      const replacement = [...path.posix.resolve(baseUrl, value)].map((segment) => segment === "*" ? `$${++matchId}` : segment === "$" ? "$$" : segment).join("");
      aliases.push({ find, replacement });
    }
  }
  aliases.push({
    find: /^(?!\.*\/)(.+)$/,
    replacement: `${[...baseUrl].map((segment) => segment === "$" ? "$$" : segment).join("")}/$1`
  });
  return aliases;
};
function configAliasVitePlugin(astroConfig) {
  const configAlias = getConfigAlias(astroConfig.projectRoot && url.fileURLToPath(astroConfig.projectRoot));
  if (!configAlias)
    return {};
  return {
    name: "astro:tsconfig-alias",
    enforce: "pre",
    async resolveId(sourceId, importer, options) {
      const resolvedId = await this.resolve(sourceId, importer, __spreadValues({ skipSelf: true }, options));
      if (resolvedId)
        return resolvedId;
      for (const alias of configAlias) {
        if (alias.find.test(sourceId)) {
          const aliasedSourceId = sourceId.replace(alias.find, alias.replacement);
          const resolvedAliasedId = await this.resolve(aliasedSourceId, importer, __spreadValues({ skipSelf: true }, options));
          if (resolvedAliasedId)
            return resolvedAliasedId;
        }
      }
    }
  };
}
export {
  configAliasVitePlugin as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWNvbmZpZy1hbGlhcy9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFXQSxNQUFNLFlBQVksQ0FBQyxhQUFxQixPQUFPLFFBQVEsRUFBRSxNQUFNLEtBQUssR0FBRyxFQUFFLEtBQUssS0FBSyxNQUFNLEdBQUc7QUFHNUYsTUFBTSxvQkFBb0IsQ0FBQyxZQUFvQixRQUE4RDtBQUM1RyxRQUFNLFNBQVMsSUFBSSxxQkFBcUIsRUFBRSxLQUFLLFdBQVcsQ0FBQztBQUUzRCxTQUFPLE9BQU8sU0FBUyxTQUFTO0FBQ2pDO0FBR0EsTUFBTSxpQkFBaUIsQ0FBQyxRQUE0QztBQUVuRSxRQUFNLFNBQVMsa0JBQWtCLGlCQUFpQixHQUFHLEtBQUssa0JBQWtCLGlCQUFpQixHQUFHO0FBR2hHLE1BQUksQ0FBQztBQUFRLFdBQU87QUFHcEIsUUFBTSxrQkFBa0IsT0FBTyxPQUFPLE9BQU8sZUFBZTtBQUc1RCxNQUFJLENBQUMsZ0JBQWdCO0FBQVMsV0FBTztBQUdyQyxRQUFNLFVBQVUsS0FBSyxNQUFNLFFBQVEsS0FBSyxNQUFNLFFBQVEsVUFBVSxPQUFPLElBQUksRUFBRSxRQUFRLFFBQVEsR0FBRyxDQUFDLEdBQUcsVUFBVSxnQkFBZ0IsT0FBTyxDQUFDO0FBR3RJLFFBQU0sVUFBbUIsQ0FBQztBQUcxQixXQUFTLENBQUMsT0FBTyxXQUFXLE9BQU8sUUFBUSxPQUFPLGdCQUFnQixLQUFLLENBQWdDLEdBQUc7QUFDekcsYUFBUyxDQUFDLEVBQUUsT0FBTyxNQUFlO0FBR2xDLFVBQU0sT0FBTyxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFhLFlBQVksTUFBTSxTQUFTLFFBQVEsUUFBUSxzQkFBc0IsTUFBTSxDQUFFLEVBQUUsS0FBSyxFQUFFLElBQUk7QUFHL0ksUUFBSSxVQUFVO0FBRWQsYUFBUyxTQUFTLFFBQVE7QUFFekIsWUFBTSxjQUFjLENBQUMsR0FBRyxLQUFLLE1BQU0sUUFBUSxTQUFTLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFhLFlBQVksTUFBTSxJQUFJLEVBQUUsWUFBWSxZQUFZLE1BQU0sT0FBTyxPQUFRLEVBQUUsS0FBSyxFQUFFO0FBRTVKLGNBQVEsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQUEsSUFDbkM7QUFBQSxFQUNEO0FBS0EsVUFBUSxLQUFLO0FBQUEsSUFDWixNQUFNO0FBQUEsSUFDTixhQUFhLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBYSxZQUFZLE1BQU0sT0FBTyxPQUFRLEVBQUUsS0FBSyxFQUFFO0FBQUEsRUFDMUYsQ0FBQztBQUVELFNBQU87QUFDUjtBQUdlLCtCQUErQixhQUErRTtBQUU1SCxRQUFNLGNBQWMsZUFBZSxZQUFZLGVBQWUsSUFBSSxjQUFjLFlBQVksV0FBVyxDQUFDO0FBR3hHLE1BQUksQ0FBQztBQUFhLFdBQU8sQ0FBQztBQUUxQixTQUFPO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsVUFDSCxVQUFVLFVBQWtCLFVBQVUsU0FBUztBQUVwRCxZQUFNLGFBQWEsTUFBTSxLQUFLLFFBQVEsVUFBVSxVQUFVLGlCQUFFLFVBQVUsUUFBUyxRQUFTO0FBR3hGLFVBQUk7QUFBWSxlQUFPO0FBR3ZCLGlCQUFXLFNBQVMsYUFBYTtBQUNoQyxZQUFJLE1BQU0sS0FBSyxLQUFLLFFBQVEsR0FBRztBQUU5QixnQkFBTSxrQkFBa0IsU0FBUyxRQUFRLE1BQU0sTUFBTSxNQUFNLFdBQVc7QUFHdEUsZ0JBQU0sb0JBQW9CLE1BQU0sS0FBSyxRQUFRLGlCQUFpQixVQUFVLGlCQUFFLFVBQVUsUUFBUyxRQUFTO0FBR3RHLGNBQUk7QUFBbUIsbUJBQU87QUFBQSxRQUMvQjtBQUFBLE1BQ0Q7QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
