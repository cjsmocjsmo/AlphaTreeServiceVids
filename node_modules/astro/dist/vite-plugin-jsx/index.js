import babel from "@babel/core";
import esbuild from "esbuild";
import * as colors from "kleur/colors";
import * as eslexer from "es-module-lexer";
import path from "path";
import { error } from "../core/logger.js";
import { parseNpmName, resolveDependency } from "../core/util.js";
const JSX_RENDERER_CACHE = /* @__PURE__ */ new WeakMap();
const JSX_EXTENSIONS = /* @__PURE__ */ new Set([".jsx", ".tsx"]);
const IMPORT_STATEMENTS = {
  react: "import React from 'react'",
  preact: "import { h } from 'preact'",
  "solid-js": "import 'solid-js/web'"
};
const PREVENT_UNUSED_IMPORTS = ";;(React,Fragment,h);";
function getEsbuildLoader(fileExt) {
  return fileExt.substr(1);
}
async function importJSXRenderers(config) {
  const renderers = /* @__PURE__ */ new Map();
  await Promise.all(config.renderers.map((name) => {
    return import(resolveDependency(name, config)).then(({ default: renderer }) => {
      if (!renderer.jsxImportSource)
        return;
      renderers.set(renderer.jsxImportSource, renderer);
    });
  }));
  return renderers;
}
async function transformJSX({ code, mode, id, ssr, renderer }) {
  const { jsxTransformOptions } = renderer;
  const options = await jsxTransformOptions({ mode, ssr });
  const plugins = [...options.plugins || []];
  const result = await babel.transformAsync(code, {
    presets: options.presets,
    plugins,
    cwd: process.cwd(),
    filename: id,
    ast: false,
    compact: false,
    sourceMaps: true,
    configFile: false,
    babelrc: false
  });
  if (!result)
    return null;
  return {
    code: result.code || "",
    map: result.map
  };
}
function jsx({ config, logging }) {
  let viteConfig;
  return {
    name: "astro:jsx",
    enforce: "pre",
    configResolved(resolvedConfig) {
      viteConfig = resolvedConfig;
    },
    async transform(code, id, opts) {
      const ssr = Boolean(opts == null ? void 0 : opts.ssr);
      if (!JSX_EXTENSIONS.has(path.extname(id))) {
        return null;
      }
      const { mode } = viteConfig;
      let jsxRenderers = JSX_RENDERER_CACHE.get(config);
      if (!jsxRenderers) {
        jsxRenderers = /* @__PURE__ */ new Map();
        const possibleRenderers = await importJSXRenderers(config);
        if (possibleRenderers.size === 0) {
          throw new Error(`${colors.yellow(id)}
Unable to resolve a renderer that handles JSX transforms! Please include a \`renderer\` plugin which supports JSX in your \`astro.config.mjs\` file.`);
        }
        for (const [importSource2, renderer] of possibleRenderers) {
          jsxRenderers.set(importSource2, renderer);
        }
        JSX_RENDERER_CACHE.set(config, jsxRenderers);
      }
      if (jsxRenderers.size === 1) {
        const { code: jsxCode } = await esbuild.transform(code, {
          loader: getEsbuildLoader(path.extname(id)),
          jsx: "preserve",
          sourcefile: id,
          sourcemap: "inline"
        });
        return transformJSX({ code: jsxCode, id, renderer: [...jsxRenderers.values()][0], mode, ssr });
      }
      const { code: jsCode } = await esbuild.transform(code + PREVENT_UNUSED_IMPORTS, {
        loader: getEsbuildLoader(path.extname(id)),
        jsx: "transform",
        jsxFactory: "h",
        jsxFragment: "Fragment",
        sourcefile: id,
        sourcemap: "inline"
      });
      let imports = [];
      if (/import/.test(jsCode)) {
        let [i] = eslexer.parse(jsCode);
        imports = i;
      }
      let importSource;
      if (imports.length > 0) {
        for (let { n: spec } of imports) {
          const pkg = spec && parseNpmName(spec);
          if (!pkg)
            continue;
          if (jsxRenderers.has(pkg.name)) {
            importSource = pkg.name;
            break;
          }
        }
      }
      if (!importSource) {
        const multiline = code.match(/\/\*\*[\S\s]*\*\//gm) || [];
        for (const comment of multiline) {
          const [_, lib] = comment.match(/@jsxImportSource\s*(\S+)/) || [];
          if (lib) {
            importSource = lib;
            break;
          }
        }
      }
      if (importSource) {
        const jsxRenderer = jsxRenderers.get(importSource);
        if (!jsxRenderer) {
          error(logging, "renderer", `${colors.yellow(id)} No renderer installed for ${importSource}. Try adding \`@astrojs/renderer-${importSource}\` to your dependencies.`);
          return null;
        }
        const { code: jsxCode } = await esbuild.transform(code, {
          loader: getEsbuildLoader(path.extname(id)),
          jsx: "preserve",
          sourcefile: id,
          sourcemap: "inline"
        });
        return await transformJSX({ code: jsxCode, id, renderer: jsxRenderers.get(importSource), mode, ssr });
      }
      const defaultRenderer = [...jsxRenderers.keys()][0];
      error(logging, "renderer", `${colors.yellow(id)}
Unable to resolve a renderer that handles this file! With more than one renderer enabled, you should include an import or use a pragma comment.
Add ${colors.cyan(IMPORT_STATEMENTS[defaultRenderer] || `import '${defaultRenderer}';`)} or ${colors.cyan(`/* jsxImportSource: ${defaultRenderer} */`)} to this file.
`);
      return null;
    }
  };
}
export {
  jsx as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWpzeC9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTSxxQkFBcUIsb0JBQUksUUFBNEM7QUFDM0UsTUFBTSxpQkFBaUIsb0JBQUksSUFBSSxDQUFDLFFBQVEsTUFBTSxDQUFDO0FBQy9DLE1BQU0sb0JBQTRDO0FBQUEsRUFDakQsT0FBTztBQUFBLEVBQ1AsUUFBUTtBQUFBLEVBQ1IsWUFBWTtBQUNiO0FBS0EsTUFBTSx5QkFBeUI7QUFFL0IsMEJBQTBCLFNBQXlCO0FBQ2xELFNBQU8sUUFBUSxPQUFPLENBQUM7QUFDeEI7QUFFQSxrQ0FBa0MsUUFBcUQ7QUFDdEYsUUFBTSxZQUFZLG9CQUFJLElBQXNCO0FBQzVDLFFBQU0sUUFBUSxJQUNiLE9BQU8sVUFBVSxJQUFJLENBQUMsU0FBUztBQUM5QixXQUFPLE9BQU8sa0JBQWtCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxFQUFFLFNBQVMsZUFBZTtBQUM5RSxVQUFJLENBQUMsU0FBUztBQUFpQjtBQUMvQixnQkFBVSxJQUFJLFNBQVMsaUJBQWlCLFFBQVE7QUFBQSxJQUNqRCxDQUFDO0FBQUEsRUFDRixDQUFDLENBQ0Y7QUFDQSxTQUFPO0FBQ1I7QUFVQSw0QkFBNEIsRUFBRSxNQUFNLE1BQU0sSUFBSSxLQUFLLFlBQTJEO0FBQzdHLFFBQU0sRUFBRSx3QkFBd0I7QUFDaEMsUUFBTSxVQUFVLE1BQU0sb0JBQXFCLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDeEQsUUFBTSxVQUFVLENBQUMsR0FBSSxRQUFRLFdBQVcsQ0FBQyxDQUFFO0FBQzNDLFFBQU0sU0FBUyxNQUFNLE1BQU0sZUFBZSxNQUFNO0FBQUEsSUFDL0MsU0FBUyxRQUFRO0FBQUEsSUFDakI7QUFBQSxJQUNBLEtBQUssUUFBUSxJQUFJO0FBQUEsSUFDakIsVUFBVTtBQUFBLElBQ1YsS0FBSztBQUFBLElBQ0wsU0FB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
