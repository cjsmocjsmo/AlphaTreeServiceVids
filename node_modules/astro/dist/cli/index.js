import { enableVerboseLogging } from "../core/logger.js";
import * as colors from "kleur/colors";
import yargs from "yargs-parser";
import { z } from "zod";
import { defaultLogDestination } from "../core/logger.js";
import build from "../core/build/index.js";
import devServer from "../core/dev/index.js";
import preview from "../core/preview/index.js";
import { check } from "./check.js";
import { formatConfigError, loadConfig } from "../core/config.js";
import { pad } from "../core/dev/util.js";
function printHelp() {
  linebreak();
  headline("astro", "Futuristic web development tool.");
  linebreak();
  title("Commands");
  table([
    ["dev", "Run Astro in development mode."],
    ["build", "Build a pre-compiled production-ready site."],
    ["preview", "Preview your build locally before deploying."],
    ["check", "Check your project for errors."],
    ["--version", "Show the version number and exit."],
    ["--help", "Show this help message."]
  ], { padding: 28, prefix: "  astro " });
  linebreak();
  title("Flags");
  table([
    ["--host [optional IP]", "Expose server on network"],
    ["--config <path>", "Specify the path to the Astro config file."],
    ["--project-root <path>", "Specify the path to the project root folder."],
    ["--no-sitemap", "Disable sitemap generation (build only)."],
    ["--legacy-build", "Use the build strategy prior to 0.24.0"],
    ["--experimental-ssr", "Enable SSR compilation."],
    ["--drafts", "Include markdown draft pages in the build."],
    ["--verbose", "Enable verbose logging"],
    ["--silent", "Disable logging"]
  ], { padding: 28, prefix: "  " });
  function linebreak() {
    console.log();
  }
  function headline(name, tagline) {
    console.log(`  ${colors.bgGreen(colors.black(` ${name} `))} ${colors.green(`v${"0.24.0"}`)} ${tagline}`);
  }
  function title(label) {
    console.log(`  ${colors.bgWhite(colors.black(` ${label} `))}`);
  }
  function table(rows, opts) {
    const split = rows.some((row) => {
      const message = `${opts.prefix}${" ".repeat(opts.padding)}${row[1]}`;
      return message.length > process.stdout.columns;
    });
    for (const row of rows) {
      row.forEach((col, i) => {
        if (i === 0) {
          process.stdout.write(`${opts.prefix}${colors.bold(pad(`${col}`, opts.padding - opts.prefix.length))}`);
        } else {
          if (split) {
            process.stdout.write("\n    ");
          }
          process.stdout.write(colors.dim(col) + "\n");
        }
      });
    }
    return "";
  }
}
async function printVersion() {
  const version = "0.24.0";
  console.log();
  console.log(`  ${colors.bgGreen(colors.black(` astro `))} ${colors.green(`v${version}`)}`);
}
function resolveCommand(flags) {
  if (flags.version) {
    return "version";
  } else if (flags.help) {
    return "help";
  }
  const cmd = flags._[2];
  const supportedCommands = /* @__PURE__ */ new Set(["dev", "build", "preview", "check"]);
  if (supportedCommands.has(cmd)) {
    return cmd;
  }
  return "help";
}
async function cli(args) {
  const flags = yargs(args);
  const cmd = resolveCommand(flags);
  const projectRoot = flags.projectRoot || flags._[3];
  switch (cmd) {
    case "help":
      printHelp();
      return process.exit(0);
    case "version":
      await printVersion();
      return process.exit(0);
  }
  let logging = {
    dest: defaultLogDestination,
    level: "info"
  };
  if (flags.verbose) {
    logging.level = "debug";
    enableVerboseLogging();
  } else if (flags.silent) {
    logging.level = "silent";
  }
  let config;
  try {
    config = await loadConfig({ cwd: projectRoot, flags });
  } catch (err) {
    throwAndExit(err);
    return;
  }
  switch (cmd) {
    case "dev": {
      try {
        await devServer(config, { logging });
        await new Promise(() => {
        });
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    case "build": {
      try {
        await build(config, { logging });
        process.exit(0);
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    case "check": {
      const ret = await check(config);
      return process.exit(ret);
    }
    case "preview": {
      try {
        await preview(config, { logging });
      } catch (err) {
        throwAndExit(err);
      }
      return;
    }
    default: {
      throw new Error(`Error running ${cmd}`);
    }
  }
}
function throwAndExit(err) {
  if (err instanceof z.ZodError) {
    console.error(formatConfigError(err));
  } else if (err.stack) {
    const [mainMsg, ...stackMsg] = err.stack.split("\n");
    console.error(colors.red(mainMsg) + "\n" + colors.dim(stackMsg.join("\n")));
  } else {
    console.error(colors.red(err.toString() || err));
  }
  process.exit(1);
}
export {
  cli
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NsaS9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQSxxQkFBcUI7QUFDcEIsWUFBVTtBQUNWLFdBQVMsU0FBUyxrQ0FBa0M7QUFDcEQsWUFBVTtBQUNWLFFBQU0sVUFBVTtBQUNoQixRQUNDO0FBQUEsSUFDQyxDQUFDLE9BQU8sZ0NBQWdDO0FBQUEsSUFDeEMsQ0FBQyxTQUFTLDZDQUE2QztBQUFBLElBQ3ZELENBQUMsV0FBVyw4Q0FBOEM7QUFBQSxJQUMxRCxDQUFDLFNBQVMsZ0NBQWdDO0FBQUEsSUFDMUMsQ0FBQyxhQUFhLG1DQUFtQztBQUFBLElBQ2pELENBQUMsVUFBVSx5QkFBeUI7QUFBQSxFQUNyQyxHQUNBLEVBQUUsU0FBUyxJQUFJLFFBQVEsV0FBVyxDQUNuQztBQUNBLFlBQVU7QUFDVixRQUFNLE9BQU87QUFDYixRQUNDO0FBQUEsSUFDQyxDQUFDLHdCQUF3QiwwQkFBMEI7QUFBQSxJQUNuRCxDQUFDLG1CQUFtQiw0Q0FBNEM7QUFBQSxJQUNoRSxDQUFDLHlCQUF5Qiw4Q0FBOEM7QUFBQSxJQUN4RSxDQUFDLGdCQUFnQiwwQ0FBMEM7QUFBQSxJQUMzRCxDQUFDLGtCQUFrQix3Q0FBd0M7QUFBQSxJQUMzRCxDQUFDLHNCQUFzQix5QkFBeUI7QUFBQSxJQUNoRCxDQUFDLFlBQVksNENBQTRDO0FBQUEsSUFDekQsQ0FBQyxhQUFhLHdCQUF3QjtBQUFBLElBQ3RDLENBQUMsWUFBWSxpQkFBaUI7QUFBQSxFQUMvQixHQUNBLEVBQUUsU0FBUyxJQUFJLFFBQVEsS0FBSyxDQUM3QjtBQUdBLHVCQUFxQjtBQUNwQixZQUFRLElBQUk7QUFBQSxFQUNiO0FBRUEsb0JBQWtCLE1BQWMsU0FBaUI7QUFDaEQsWUFBUSxJQUFJLEtBQUssT0FBTyxRQUFRLE9BQU8sTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLE9BQU8sTUFB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
