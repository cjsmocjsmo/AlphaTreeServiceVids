import { AstroCheck, DiagnosticSeverity } from "@astrojs/language-server";
import { bold, black, bgWhite, red, cyan, yellow } from "kleur/colors";
import glob from "fast-glob";
import * as path from "path";
import { pathToFileURL } from "url";
import * as fs from "fs";
async function openAllDocuments(workspaceUri, filePathsToIgnore, checker) {
  const files = await glob("**/*.astro", {
    cwd: workspaceUri.pathname,
    ignore: ["node_modules/**"].concat(filePathsToIgnore.map((ignore) => `${ignore}/**`))
  });
  const absFilePaths = files.map((f) => path.resolve(workspaceUri.pathname, f));
  for (const absFilePath of absFilePaths) {
    const text = fs.readFileSync(absFilePath, "utf-8");
    checker.upsertDocument({
      uri: pathToFileURL(absFilePath).toString(),
      text
    });
  }
}
function offsetAt({ line, character }, text) {
  let i = 0;
  let l = 0;
  let c = 0;
  while (i < text.length) {
    if (l === line && c === character) {
      break;
    }
    let char = text[i];
    switch (char) {
      case "\n": {
        l++;
        c = 0;
        break;
      }
      default: {
        c++;
        break;
      }
    }
    i++;
  }
  return i;
}
function pad(str, len) {
  return Array.from({ length: len }, () => str).join("");
}
async function run() {
}
async function check(astroConfig) {
  const root = astroConfig.projectRoot;
  let checker = new AstroCheck(root.toString());
  await openAllDocuments(root, [], checker);
  let diagnostics = await checker.getDiagnostics();
  let result = {
    errors: 0,
    warnings: 0
  };
  diagnostics.forEach((diag) => {
    diag.diagnostics.forEach((d) => {
      switch (d.severity) {
        case DiagnosticSeverity.Error: {
          console.error(`${bold(cyan(path.relative(root.pathname, diag.filePath)))}:${bold(yellow(d.range.start.line))}:${bold(yellow(d.range.start.character))} - ${d.message}`);
          let startOffset = offsetAt({ line: d.range.start.line, character: 0 }, diag.text);
          let endOffset = offsetAt({ line: d.range.start.line + 1, character: 0 }, diag.text);
          let str = diag.text.substring(startOffset, endOffset - 1);
          const lineNumStr = d.range.start.line.toString();
          const lineNumLen = lineNumStr.length;
          console.error(`${bgWhite(black(lineNumStr))}  ${str}`);
          let tildes = pad("~", d.range.end.character - d.range.start.character);
          let spaces = pad(" ", d.range.start.character + lineNumLen - 1);
          console.error(`   ${spaces}${bold(red(tildes))}
`);
          result.errors++;
          break;
        }
        case DiagnosticSeverity.Warning: {
          result.warnings++;
          break;
        }
      }
    });
  });
  if (result.errors) {
    console.error(`Found ${result.errors} errors.`);
  }
  const exitCode = result.errors ? 1 : 0;
  return exitCode;
}
export {
  check,
  run
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NsaS9jaGVjay50cyJdLAogICJtYXBwaW5ncyI6ICJBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLGdDQUFnQyxjQUFtQixtQkFBNkIsU0FBcUI7QUFDcEcsUUFBTSxRQUFRLE1BQU0sS0FBSyxjQUFjO0FBQUEsSUFDdEMsS0FBSyxhQUFhO0FBQUEsSUFDbEIsUUFBUSxDQUFDLGlCQUFpQixFQUFFLE9BQU8sa0JBQWtCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQUEsRUFDckYsQ0FBQztBQUNELFFBQU0sZUFBZSxNQUFNLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxhQUFhLFVBQVUsQ0FBQyxDQUFDO0FBRTVFLGFBQVcsZUFBZSxjQUFjO0FBQ3ZDLFVBQU0sT0FBTyxHQUFHLGFBQWEsYUFBYSxPQUFPO0FBQ2pELFlBQVEsZUFBZTtBQUFBLE1BQ3RCLEtBQUssY0FBYyxXQUFXLEVBQUUsU0FBUztBQUFBLE1BQ3pDO0FBQUEsSUFDRCxDQUFDO0FBQUEsRUFDRjtBQUNEO0FBT0Esa0JBQWtCLEVBQUUsTUFBTSxhQUFrRCxNQUFjO0FBQ3pGLE1BQUksSUFBSTtBQUNSLE1BQUksSUFBSTtBQUNSLE1BQUksSUFBSTtBQUNSLFNBQU8sSUFBSSxLQUFLLFFBQVE7QUFDdkIsUUFBSSxNQUFNLFFBQVEsTUFBTSxXQUFXO0FBQ2xDO0FBQUEsSUFDRDtBQUVBLFFBQUksT0FBTyxLQUFLO0FBQ2hCLFlBQVE7QUFBQSxXQUNGLE1BQU07QUFDVjtBQUNBLFlBQUk7QUFDSjtBQUFBLE1BQ0Q7QUFBQSxlQUNTO0FBQ1I7QUFDQTtBQUFBLE1BQ0Q7QUFBQTtBQUdEO0FBQUEsRUFDRDtBQUVBLFNBQU87QUFDUjtBQUVBLGFBQWEsS0FBYSxLQUFhO0FBQ3RDLFNBQU8sTUFBTSxLQUFLLEVBQUUsUUFBUSxJQUFJLEdBQUcsTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3REO0FBRUEscUJBQTRCO0FBQUM7QUFFN0IscUJBQTRCLGFBQTBCO0FBQ3JELFFBQU0sT0FBTyxZQUFZO0FBQ3pCLE1BQUksVUFBVSxJQUFJLFdBQVcsS0FBSyxTQUFTLENBQUM7QUFDNUMsUUFBTSxpQkFBaUIsTUFBTSxDQUFDLEdBQUcsT0FBTztBQUV4QyxNQUFJLGNBQWMsTUFBTSxRQUFRLGVBQWU7QUFFL0MsTUFBSSxTQUFpQjtBQUFBLElBQ3BCLFFBQVE7QUFBQSxJQUNSLFVBQVU7QUFBQSxFQUNYO0FBRUEsY0FBWSxRQUFRLENBQUMsU0FBUztBQUM3QixTQUFLLFlBQVksUUFBUSxDQUFDLE1BQU07QUFDL0IsY0FBUSxFQUFFO0FBQUEsYUFDSixtQkFBbUIsT0FBTztBQUM5QixrQkFBUSxNQUFNLEdBQUcsS0FBSyxLQUFLLEtBQUssU0FBUyxLQUFLLFVBQVUsS0FBSyxRQUFRLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFFLE1BQU0sTUFBTSxJQUFJLENBQUMsS0FBSyxLQUFLLE9BQU8sRUFBRSxNQUFNLE1BQU0sU0FBUyxDQUFDLE9BQU8sRUFBRSxTQUFTO0FBQ3RLLGNBQUksY0FBYyxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sTUFBTSxNQUFNLFdBQVcsRUFBRSxHQUFHLEtBQUssSUFBSTtBQUNoRixjQUFJLFlBQVksU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLE1BQU0sT0FBTyxHQUFHLFdBQVcsRUFBRSxHQUFHLEtBQUssSUFBSTtBQUNsRixjQUFJLE1BQU0sS0FBSyxLQUFLLFVBQVUsYUFBYSxZQUFZLENBQUM7QUFDeEQsZ0JBQU0sYUFBYSxFQUFFLE1BQU0sTUFBTSxLQUFLLFNBQVM7QUFDL0MsZ0JBQU0sYUFBYSxXQUFXO0FBQzlCLGtCQUFRLE1BQU0sR0FBRyxRQUFRLE1BQU0sVUFBVSxDQUFDLE1BQU0sS0FBSztBQUNyRCxjQUFJLFNBQVMsSUFBSSxLQUFLLEVBQUUsTUFBTSxJQUFJLFlBQVksRUFBRSxNQUFNLE1BQU0sU0FBUztBQUNyRSxjQUFJLFNBQVMsSUFBSSxLQUFLLEVBQUUsTUFBTSxNQUFNLFlBQVksYUFBYSxDQUFDO0FBQzlELGtCQUFRLE1BQU0sTUFBTSxTQUFTLEtBQUssSUFBSSxNQUFNLENBQUM7QUFBQSxDQUFLO0FBQ2xELGlCQUFPO0FBQ1A7QUFBQSxRQUNEO0FBQUEsYUFDSyxtQkFBbUIsU0FBUztBQUNoQyxpQkFBTztBQUNQO0FBQUEsUUFDRDtBQUFBO0FBQUEsSUFFRixDQUFDO0FBQUEsRUFDRixDQUFDO0FBRUQsTUFBSSxPQUFPLFFBQVE7QUFDbEIsWUFBUSxNQUFNLFNBQVMsT0FBTyxnQkFBZ0I7QUFBQSxFQUMvQztBQUVBLFFBQU0sV0FBVyxPQUFPLFNBQVMsSUFBSTtBQUNyQyxTQUFPO0FBQ1I7IiwKICAibmFtZXMiOiBbXQp9Cg==
