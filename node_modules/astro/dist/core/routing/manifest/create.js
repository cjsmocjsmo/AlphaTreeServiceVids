import fs from "fs";
import path from "path";
import { compile } from "path-to-regexp";
import slash from "slash";
import { fileURLToPath } from "url";
import { warn } from "../../logger.js";
function countOccurrences(needle, haystack) {
  let count = 0;
  for (let i = 0; i < haystack.length; i += 1) {
    if (haystack[i] === needle)
      count += 1;
  }
  return count;
}
function getParts(part, file) {
  const result = [];
  part.split(/\[(.+?\(.+?\)|.+?)\]/).map((str, i) => {
    if (!str)
      return;
    const dynamic = i % 2 === 1;
    const [, content] = dynamic ? /([^(]+)$/.exec(str) || [null, null] : [null, str];
    if (!content || dynamic && !/^(\.\.\.)?[a-zA-Z0-9_$]+$/.test(content)) {
      throw new Error(`Invalid route ${file} \u2014 parameter name must match /^[a-zA-Z0-9_$]+$/`);
    }
    result.push({
      content,
      dynamic,
      spread: dynamic && /^\.{3}.+$/.test(content)
    });
  });
  return result;
}
function getPattern(segments, addTrailingSlash) {
  const pathname = segments.map((segment) => {
    return segment[0].spread ? "(?:\\/(.*?))?" : "\\/" + segment.map((part) => {
      if (part)
        return part.dynamic ? "([^/]+?)" : part.content.normalize().replace(/\?/g, "%3F").replace(/#/g, "%23").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join("");
  }).join("");
  const trailing = addTrailingSlash && segments.length ? getTrailingSlashPattern(addTrailingSlash) : "$";
  return new RegExp(`^${pathname || "\\/"}${trailing}`);
}
function getTrailingSlashPattern(addTrailingSlash) {
  if (addTrailingSlash === "always") {
    return "\\/$";
  }
  if (addTrailingSlash === "never") {
    return "$";
  }
  return "\\/?$";
}
function getGenerator(segments, addTrailingSlash) {
  const template = segments.map((segment) => {
    return segment[0].spread ? `/:${segment[0].content.substr(3)}(.*)?` : "/" + segment.map((part) => {
      if (part)
        return part.dynamic ? `:${part.content}` : part.content.normalize().replace(/\?/g, "%3F").replace(/#/g, "%23").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join("");
  }).join("");
  const trailing = addTrailingSlash !== "never" && segments.length ? "/" : "";
  const toPath = compile(template + trailing);
  return toPath;
}
function isSpread(str) {
  const spreadPattern = /\[\.{3}/g;
  return spreadPattern.test(str);
}
function comparator(a, b) {
  if (a.isIndex !== b.isIndex) {
    if (a.isIndex)
      return isSpread(a.file) ? 1 : -1;
    return isSpread(b.file) ? -1 : 1;
  }
  const max = Math.max(a.parts.length, b.parts.length);
  for (let i = 0; i < max; i += 1) {
    const aSubPart = a.parts[i];
    const bSubPart = b.parts[i];
    if (!aSubPart)
      return 1;
    if (!bSubPart)
      return -1;
    if (aSubPart.spread && bSubPart.spread) {
      return a.isIndex ? 1 : -1;
    }
    if (aSubPart.spread !== bSubPart.spread)
      return aSubPart.spread ? 1 : -1;
    if (aSubPart.dynamic !== bSubPart.dynamic) {
      return aSubPart.dynamic ? 1 : -1;
    }
    if (!aSubPart.dynamic && aSubPart.content !== bSubPart.content) {
      return bSubPart.content.length - aSubPart.content.length || (aSubPart.content < bSubPart.content ? -1 : 1);
    }
  }
  if (a.isPage !== b.isPage) {
    return a.isPage ? 1 : -1;
  }
  return a.file < b.file ? -1 : 1;
}
function createRouteManifest({ config, cwd }, logging) {
  const components = [];
  const routes = [];
  const validPageExtensions = /* @__PURE__ */ new Set([".astro", ".md"]);
  const validEndpointExtensions = /* @__PURE__ */ new Set([".js", ".ts"]);
  function walk(dir, parentSegments, parentParams) {
    let items = [];
    fs.readdirSync(dir).forEach((basename) => {
      const resolved = path.join(dir, basename);
      const file = slash(path.relative(cwd || fileURLToPath(config.projectRoot), resolved));
      const isDir = fs.statSync(resolved).isDirectory();
      const ext = path.extname(basename);
      const name = ext ? basename.slice(0, -ext.length) : basename;
      if (name[0] === "_") {
        return;
      }
      if (basename[0] === "." && basename !== ".well-known") {
        return;
      }
      if (!isDir && !validPageExtensions.has(ext) && !validEndpointExtensions.has(ext)) {
        return;
      }
      const segment = isDir ? basename : name;
      if (/^\$/.test(segment)) {
        throw new Error(`Invalid route ${file} \u2014 Astro's Collections API has been replaced by dynamic route params.`);
      }
      if (/\]\[/.test(segment)) {
        throw new Error(`Invalid route ${file} \u2014 parameters must be separated`);
      }
      if (countOccurrences("[", segment) !== countOccurrences("]", segment)) {
        throw new Error(`Invalid route ${file} \u2014 brackets are unbalanced`);
      }
      if (/.+\[\.\.\.[^\]]+\]/.test(segment) || /\[\.\.\.[^\]]+\].+/.test(segment)) {
        throw new Error(`Invalid route ${file} \u2014 rest parameter must be a standalone segment`);
      }
      const parts = getParts(segment, file);
      const isIndex = isDir ? false : basename.startsWith("index.");
      const routeSuffix = basename.slice(basename.indexOf("."), -ext.length);
      const isPage = validPageExtensions.has(ext);
      items.push({
        basename,
        ext,
        parts,
        file: file.replace(/\\/g, "/"),
        isDir,
        isIndex,
        isPage,
        routeSuffix
      });
    });
    items = items.sort(comparator);
    items.forEach((item) => {
      const segments = parentSegments.slice();
      if (item.isIndex) {
        if (item.routeSuffix) {
          if (segments.length > 0) {
            const lastSegment = segments[segments.length - 1].slice();
            const lastPart = lastSegment[lastSegment.length - 1];
            if (lastPart.dynamic) {
              lastSegment.push({
                dynamic: false,
                spread: false,
                content: item.routeSuffix
              });
            } else {
              lastSegment[lastSegment.length - 1] = {
                dynamic: false,
                spread: false,
                content: `${lastPart.content}${item.routeSuffix}`
              };
            }
            segments[segments.length - 1] = lastSegment;
          } else {
            segments.push(item.parts);
          }
        }
      } else {
        segments.push(item.parts);
      }
      const params = parentParams.slice();
      params.push(...item.parts.filter((p) => p.dynamic).map((p) => p.content));
      if (item.isDir) {
        walk(path.join(dir, item.basename), segments, params);
      } else {
        components.push(item.file);
        const component = item.file;
        const trailingSlash = item.isPage ? config.devOptions.trailingSlash : "never";
        const pattern = getPattern(segments, trailingSlash);
        const generate = getGenerator(segments, trailingSlash);
        const pathname = segments.every((segment) => segment.length === 1 && !segment[0].dynamic) ? `/${segments.map((segment) => segment[0].content).join("/")}` : null;
        routes.push({
          type: item.isPage ? "page" : "endpoint",
          pattern,
          params,
          component,
          generate,
          pathname: pathname || void 0
        });
      }
    });
  }
  if (fs.existsSync(config.pages)) {
    walk(fileURLToPath(config.pages), [], []);
  } else {
    const pagesDirRootRelative = config.pages.href.slice(config.projectRoot.href.length);
    warn(logging, "astro", `Missing pages directory: ${pagesDirRootRelative}`);
  }
  return {
    routes
  };
}
export {
  createRouteManifest
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvcm91dGluZy9tYW5pZmVzdC9jcmVhdGUudHMiXSwKICAibWFwcGluZ3MiOiAiQUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFtQkEsMEJBQTBCLFFBQWdCLFVBQWtCO0FBQzNELE1BQUksUUFBUTtBQUNaLFdBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUssR0FBRztBQUM1QyxRQUFJLFNBQVMsT0FBTztBQUFRLGVBQVM7QUFBQSxFQUN0QztBQUNBLFNBQU87QUFDUjtBQUVBLGtCQUFrQixNQUFjLE1BQWM7QUFDN0MsUUFBTSxTQUFpQixDQUFDO0FBQ3hCLE9BQUssTUFBTSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsS0FBSyxNQUFNO0FBQ2xELFFBQUksQ0FBQztBQUFLO0FBQ1YsVUFBTSxVQUFVLElBQUksTUFBTTtBQUUxQixVQUFNLENBQUMsRUFBRSxXQUFXLFVBQVUsV0FBVyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHO0FBRS9FLFFBQUksQ0FBQyxXQUFZLFdBQVcsQ0FBQyw0QkFBNEIsS0FBSyxPQUFPLEdBQUk7QUFDeEUsWUFBTSxJQUFJLE1BQU0saUJBQWlCLDBEQUFxRDtBQUFBLElBQ3ZGO0FBRUEsV0FBTyxLQUFLO0FBQUEsTUFDWDtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVEsV0FBVyxZQUFZLEtBQUssT0FBTztBQUFBLElBQzVDLENBQUM7QUFBQSxFQUNGLENBQUM7QUFFRCxTQUFPO0FBQ1I7QUFFQSxvQkFBb0IsVUFBb0Isa0JBQThEO0FBQ3JHLFFBQU0sV0FBVyxTQUNmLElBQUksQ0FBQyxZQUFZO0FBQ2pCLFdBQU8sUUFBUSxHQUFHLFNBQ2Ysa0JBQ0EsUUFDQSxRQUNFLElBQUksQ0FBQyxTQUFTO0FBQ2QsVUFBSTtBQUNILGVBQU8sS0FBSyxVQUNULGFBQ0EsS0FBSyxRQUNKLFVBQVUsRUFDVixRQUFRLE9BQU8sS0FBSyxF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
