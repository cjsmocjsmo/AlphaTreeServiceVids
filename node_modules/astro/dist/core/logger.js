import { bold, cyan, dim, red, grey, underline, yellow, reset } from "kleur/colors";
import { performance } from "perf_hooks";
import { Writable } from "stream";
import stringWidth from "string-width";
import debugPackage from "debug";
import { format as utilFormat } from "util";
function getLoggerLocale() {
  const defaultLocale = "en-US";
  if (process.env.LANG) {
    const extractedLocale = process.env.LANG.split(".")[0].replace(/_/g, "-");
    if (extractedLocale.length < 2)
      return defaultLocale;
    else
      return extractedLocale.substring(0, 5);
  } else
    return defaultLocale;
}
const dt = new Intl.DateTimeFormat(getLoggerLocale(), {
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
});
let lastMessage;
let lastMessageCount = 1;
const defaultLogDestination = new Writable({
  objectMode: true,
  write(event, _, callback) {
    let dest = process.stderr;
    if (levels[event.level] < levels["error"]) {
      dest = process.stdout;
    }
    function getPrefix() {
      let prefix = "";
      let type = event.type;
      if (type) {
        prefix += dim(dt.format(new Date()) + " ");
        if (event.level === "info") {
          type = bold(cyan(`[${type}]`));
        } else if (event.level === "warn") {
          type = bold(yellow(`[${type}]`));
        } else if (event.level === "error") {
          type = bold(red(`[${type}]`));
        }
        prefix += `${type} `;
      }
      return reset(prefix);
    }
    let message = utilFormat(...event.args);
    if (message === lastMessage) {
      lastMessageCount++;
      if (levels[event.level] < levels["error"]) {
        let lines = 1;
        let len = stringWidth(`${getPrefix()}${message}`);
        let cols = dest.columns;
        if (len > cols) {
          lines = Math.ceil(len / cols);
        }
        for (let i = 0; i < lines; i++) {
          dest.clearLine(0);
          dest.cursorTo(0);
          dest.moveCursor(0, -1);
        }
      }
      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;
    } else {
      lastMessage = message;
      lastMessageCount = 1;
    }
    dest.write(getPrefix());
    dest.write(message);
    dest.write("\n");
    callback();
  }
});
const defaultLogOptions = {
  dest: defaultLogDestination,
  level: "info"
};
const levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function enableVerboseLogging() {
  debugPackage.enable("*,-babel");
  debug("cli", '--verbose flag enabled! Enabling: DEBUG="*,-babel"');
  debug("cli", 'Tip: Set the DEBUG env variable directly for more control. Example: "DEBUG=astro:*,vite:* astro build".');
}
function log(opts = {}, level, type, ...args) {
  const logLevel = opts.level ?? defaultLogOptions.level;
  const dest = opts.dest ?? defaultLogOptions.dest;
  const event = {
    type,
    level,
    args,
    message: ""
  };
  if (levels[logLevel] > levels[level]) {
    return;
  }
  dest.write(event);
}
const debuggers = {};
function debug(type, ...messages) {
  const namespace = `astro:${type}`;
  debuggers[namespace] = debuggers[namespace] || debugPackage(namespace);
  return debuggers[namespace](...messages);
}
function info(opts, type, ...messages) {
  return log(opts, "info", type, ...messages);
}
function warn(opts, type, ...messages) {
  return log(opts, "warn", type, ...messages);
}
function error(opts, type, ...messages) {
  return log(opts, "error", type, ...messages);
}
function table(opts, columns) {
  return function logTable(logFn, ...input) {
    const messages = columns.map((len, i) => padStr(input[i].toString(), len));
    logFn(opts, null, ...messages);
  };
}
function parseError(opts, err) {
  if (!err.frame) {
    return error(opts, "parse-error", err.message || err);
  }
  let frame = err.frame.replace(/^([0-9]+)(:)/gm, `${bold("$1")} \u2502`).replace(/(?<=^\s+)(\^)/gm, bold(red(" ^"))).replace(/^/gm, "   ");
  error(opts, "parse-error", `
 ${underline(bold(grey(`${err.filename || ""}:${err.start.line}:${err.start.column}`)))}
 ${bold(red(`\u{1D605} ${err.message}`))}
${frame}
`);
}
const logger = {
  info: info.bind(null, defaultLogOptions),
  warn: warn.bind(null, defaultLogOptions),
  error: error.bind(null, defaultLogOptions)
};
function padStr(str, len) {
  const strLen = stringWidth(str);
  if (strLen > len) {
    return str.substring(0, len - 3) + "...";
  }
  const spaces = Array.from({ length: len - strLen }, () => " ").join("");
  return str + spaces;
}
let defaultLogLevel;
if (process.argv.includes("--verbose")) {
  defaultLogLevel = "debug";
} else if (process.argv.includes("--silent")) {
  defaultLogLevel = "silent";
} else {
  defaultLogLevel = "info";
}
function timerMessage(message, startTime = performance.now()) {
  let timeDiff = performance.now() - startTime;
  let timeDisplay = timeDiff < 750 ? `${Math.round(timeDiff)}ms` : `${(timeDiff / 1e3).toFixed(1)}s`;
  return `${message}   ${dim(timeDisplay)}`;
}
export {
  debug,
  defaultLogDestination,
  defaultLogLevel,
  defaultLogOptions,
  enableVerboseLogging,
  error,
  info,
  levels,
  log,
  logger,
  parseError,
  table,
  timerMessage,
  warn
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvbG9nZ2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUEsMkJBQW1DO0FBQ2xDLFFBQU0sZ0JBQWdCO0FBQ3RCLE1BQUksUUFBUSxJQUFJLE1BQU07QUFDckIsVUFBTSxrQkFBa0IsUUFBUSxJQUFJLEtBQUssTUFBTSxHQUFHLEVBQUUsR0FBRyxRQUFRLE1BQU0sR0FBRztBQUd4RSxRQUFJLGdCQUFnQixTQUFTO0FBQUcsYUFBTztBQUFBO0FBQ2xDLGFBQU8sZ0JBQWdCLFVBQVUsR0FBRyxDQUFDO0FBQUEsRUFDM0M7QUFBTyxXQUFPO0FBQ2Y7QUFFQSxNQUFNLEtBQUssSUFBSSxLQUFLLGVBQWUsZ0JBQWdCLEdBQUc7QUFBQSxFQUNyRCxNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixRQUFRO0FBQ1QsQ0FBQztBQUVELElBQUk7QUFDSixJQUFJLG1CQUFtQjtBQUNoQixNQUFNLHdCQUF3QixJQUFJLFNBQVM7QUFBQSxFQUNqRCxZQUFZO0FBQUEsRUFDWixNQUFNLE9BQW1CLEdBQUcsVUFBVTtBQUNyQyxRQUFJLE9BQXNCLFFBQVE7QUFDbEMsUUFBSSxPQUFPLE1BQU0sU0FBUyxPQUFPLFVBQVU7QUFDMUMsYUFBTyxRQUFRO0FBQUEsSUFDaEI7QUFFQSx5QkFBcUI7QUFDcEIsVUFBSSxTQUFTO0FBQ2IsVUFBSSxPQUFPLE1BQU07QUFDakIsVUFBSSxNQUFNO0FBRVQsa0JBQVUsSUFBSSxHQUFHLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFHO0FBQ3pDLFlBQUksTUFBTSxVQUFVLFFBQVE7QUFDM0IsaUJBQU8sS0FBSyxLQUFLLElBQUksT0FBTyxDQUFDO0FBQUEsUUFDOUIsV0FBVyxNQUFNLFVBQVUsUUFBUTtBQUNsQyxpQkFBTyxLQUFLLE9BQU8sSUFBSSxPQUFPLENBQUM7QUFBQSxRQUNoQyxXQUFXLE1BQU0sVUFBVSxTQUFTO0FBQ25DLGlCQUFP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
