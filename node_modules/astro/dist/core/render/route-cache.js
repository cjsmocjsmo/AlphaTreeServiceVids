import { warn, debug } from "../logger.js";
import { generatePaginateFunction } from "./paginate.js";
import { validateGetStaticPathsModule, validateGetStaticPathsResult } from "../routing/index.js";
function stringifyParams(params) {
  return JSON.stringify(params, Object.keys(params).sort());
}
async function callGetStaticPaths(mod, route, isValidate, logging) {
  validateGetStaticPathsModule(mod);
  const resultInProgress = {
    rss: []
  };
  const staticPaths = await (await mod.getStaticPaths({
    paginate: generatePaginateFunction(route),
    rss: (data) => {
      resultInProgress.rss.push(data);
    }
  })).flat();
  const keyedStaticPaths = staticPaths;
  keyedStaticPaths.keyed = /* @__PURE__ */ new Map();
  for (const sp of keyedStaticPaths) {
    const paramsKey = stringifyParams(sp.params);
    keyedStaticPaths.keyed.set(paramsKey, sp);
  }
  if (isValidate) {
    validateGetStaticPathsResult(keyedStaticPaths, logging);
  }
  return {
    rss: resultInProgress.rss,
    staticPaths: keyedStaticPaths
  };
}
class RouteCache {
  constructor(logging) {
    this.cache = {};
    this.logging = logging;
  }
  clearAll() {
    this.cache = {};
  }
  set(route, entry) {
    if (this.cache[route.component]) {
      warn(this.logging, "routeCache", `Internal Warning: route cache overwritten. (${route.component})`);
    }
    this.cache[route.component] = entry;
  }
  get(route) {
    return this.cache[route.component];
  }
}
function findPathItemByKey(staticPaths, params) {
  const paramsKey = stringifyParams(params);
  let matchedStaticPath = staticPaths.keyed.get(paramsKey);
  if (matchedStaticPath) {
    return matchedStaticPath;
  }
  debug("findPathItemByKey", `Unexpected cache miss looking for ${paramsKey}`);
  matchedStaticPath = staticPaths.find(({ params: _params }) => JSON.stringify(_params) === paramsKey);
}
export {
  RouteCache,
  callGetStaticPaths,
  findPathItemByKey
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcmVuZGVyL3JvdXRlLWNhY2hlLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBQ0E7QUFFQTtBQUNBO0FBSUEseUJBQXlCLFFBQWdCO0FBRXhDLFNBQU8sS0FBSyxVQUFVLFFBQVEsT0FBTyxLQUFLLE1BQU0sRUFBRSxLQUFLLENBQUM7QUFDekQ7QUFFQSxrQ0FBeUMsS0FBd0IsT0FBa0IsWUFBcUIsU0FBK0M7QUFDdEosK0JBQTZCLEdBQUc7QUFDaEMsUUFBTSxtQkFBbUI7QUFBQSxJQUN4QixLQUFLLENBQUM7QUFBQSxFQUNQO0FBQ0EsUUFBTSxjQUFvQyxNQUN6QyxPQUFNLElBQUksZUFBZ0I7QUFBQSxJQUN6QixVQUFVLHlCQUF5QixLQUFLO0FBQUEsSUFDeEMsS0FBSyxDQUFDLFNBQVM7QUFDZCx1QkFBaUIsSUFBSSxLQUFLLElBQUk7QUFBQSxJQUMvQjtBQUFBLEVBQ0QsQ0FBQyxHQUNBLEtBQUs7QUFFUCxRQUFNLG1CQUFtQjtBQUN6QixtQkFBaUIsUUFBUSxvQkFBSSxJQUFnQztBQUM3RCxhQUFXLE1BQU0sa0JBQWtCO0FBQ2xDLFVBQU0sWUFBWSxnQkFBZ0IsR0FBRyxNQUFNO0FBQzNDLHFCQUFpQixNQUFNLElBQUksV0FBVyxFQUFFO0FBQUEsRUFDekM7QUFDQSxNQUFJLFlBQVk7QUFDZixpQ0FBNkIsa0JBQWtCLE9BQU87QUFBQSxFQUN2RDtBQUNBLFNBQU87QUFBQSxJQUNOLEtBQUssaUJBQWlCO0FBQUEsSUFDdEIsYUFBYTtBQUFBLEVBQ2Q7QUFDRDtBQVlPLE1BQU0sV0FBVztBQUFBLEVBSXZCLFlBQVksU0FBcUI7QUFGekIsaUJBQXlDLENBQUM7QUFHakQsU0FBSyxVQUFVO0FBQUEsRUFDaEI7QUFBQSxFQUdBLFdBQVc7QUFDVixTQUFLLFFBQVEsQ0FBQztBQUFBLEVBQ2Y7QUFBQSxFQUVBLElBQUksT0FBa0IsT0FBOEI7QUFJbkQsUUFBSSxLQUFLLE1BQU0sTUFBTSxZQUFZO0FBQ2hDLFdBQUssS0FBSyxTQUFTLGNBQWMsK0NBQStDLE1BQU0sWUFBWTtBQUFBLElBQ25HO0FBQ0EsU0FBSyxNQUFNLE1BQU0sYUFBYTtBQUFBLEVBQy9CO0FBQUEsRUFFQSxJQUFJLE9BQStDO0FBQ2xELFdBQU8sS0FBSyxNQUFNLE1BQU07QUFBQSxFQUN6QjtBQUNEO0FBRU8sMkJBQTJCLGFBQXdDLFFBQWdCO0FBQ3pGLFFBQU0sWUFBWSxnQkFBZ0IsTUFBTTtBQUN4QyxNQUFJLG9CQUFvQixZQUFZLE1BQU0sSUFBSSxTQUFTO0FBQ3ZELE1BQUksbUJBQW1CO0FBQ3RCLFdBQU87QUFBQSxFQUNSO0FBRUEsUUFBTSxxQkFBcUIscUNBQXFDLFdBQVc7QUFDM0Usc0JBQW9CLFlBQVksS0FBSyxDQUFDLEVBQUUsUUFBUSxjQUFjLEtBQUssVUFBVSxPQUFPLE1BQU0sU0FBUztBQUNwRzsiLAogICJuYW1lcyI6IFtdCn0K
