import * as colors from "kleur/colors";
import path from "path";
import { pathToFileURL, fileURLToPath } from "url";
import { z } from "zod";
import load from "@proload/core";
import loadTypeScript from "@proload/plugin-tsm";
load.use([loadTypeScript]);
const AstroConfigSchema = z.object({
  projectRoot: z.string().optional().default(".").transform((val) => new URL(val)),
  src: z.string().optional().default("./src").transform((val) => new URL(val)),
  pages: z.string().optional().default("./src/pages").transform((val) => new URL(val)),
  public: z.string().optional().default("./public").transform((val) => new URL(val)),
  dist: z.string().optional().default("./dist").transform((val) => new URL(val)),
  renderers: z.array(z.string()).optional().default(["@astrojs/renderer-svelte", "@astrojs/renderer-vue", "@astrojs/renderer-react", "@astrojs/renderer-preact"]),
  markdownOptions: z.object({
    render: z.any().optional().default(["@astrojs/markdown-remark", {}])
  }).strict().optional().default({}),
  buildOptions: z.object({
    site: z.string().optional().transform((val) => val ? addTrailingSlash(val) : val),
    sitemapFilter: z.function().optional(),
    sitemap: z.boolean().optional().default(true),
    pageUrlFormat: z.union([z.literal("file"), z.literal("directory")]).optional().default("directory"),
    legacyBuild: z.boolean().optional().default(false),
    experimentalStaticBuild: z.boolean().optional().default(true),
    experimentalSsr: z.boolean().optional().default(false),
    drafts: z.boolean().optional().default(false)
  }).optional().default({}),
  devOptions: z.object({
    host: z.union([z.string(), z.boolean()]).optional().default(false),
    hostname: z.string().optional().default("localhost"),
    port: z.number().optional().default(3e3),
    trailingSlash: z.union([z.literal("always"), z.literal("never"), z.literal("ignore")]).optional().default("ignore")
  }).optional().default({}),
  vite: z.any().optional().default({})
});
async function validateConfig(userConfig, root) {
  const fileProtocolRoot = pathToFileURL(root + path.sep);
  const AstroConfigRelativeSchema = AstroConfigSchema.extend({
    projectRoot: z.string().default(".").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    src: z.string().default("./src").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    pages: z.string().default("./src/pages").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    public: z.string().default("./public").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot)),
    dist: z.string().default("./dist").transform((val) => new URL(addTrailingSlash(val), fileProtocolRoot))
  });
  return AstroConfigRelativeSchema.parseAsync(userConfig);
}
function addTrailingSlash(str) {
  return str.replace(/\/*$/, "/");
}
function resolveFlags(flags) {
  if (flags.experimentalStaticBuild) {
    console.warn(`Passing --experimental-static-build is no longer necessary and is now the default. The flag will be removed in a future version of Astro.`);
  }
  return {
    projectRoot: typeof flags.projectRoot === "string" ? flags.projectRoot : void 0,
    site: typeof flags.site === "string" ? flags.site : void 0,
    sitemap: typeof flags.sitemap === "boolean" ? flags.sitemap : void 0,
    port: typeof flags.port === "number" ? flags.port : void 0,
    config: typeof flags.config === "string" ? flags.config : void 0,
    hostname: typeof flags.hostname === "string" ? flags.hostname : void 0,
    host: typeof flags.host === "string" || typeof flags.host === "boolean" ? flags.host : void 0,
    legacyBuild: typeof flags.legacyBuild === "boolean" ? flags.legacyBuild : false,
    experimentalSsr: typeof flags.experimentalSsr === "boolean" ? flags.experimentalSsr : false,
    drafts: typeof flags.drafts === "boolean" ? flags.drafts : false
  };
}
function mergeCLIFlags(astroConfig, flags) {
  astroConfig.buildOptions = astroConfig.buildOptions || {};
  astroConfig.devOptions = astroConfig.devOptions || {};
  if (typeof flags.sitemap === "boolean")
    astroConfig.buildOptions.sitemap = flags.sitemap;
  if (typeof flags.site === "string")
    astroConfig.buildOptions.site = flags.site;
  if (typeof flags.port === "number")
    astroConfig.devOptions.port = flags.port;
  if (typeof flags.host === "string" || typeof flags.host === "boolean")
    astroConfig.devOptions.host = flags.host;
  if (typeof flags.hostname === "string")
    astroConfig.devOptions.hostname = flags.hostname;
  if (typeof flags.legacyBuild === "boolean")
    astroConfig.buildOptions.legacyBuild = flags.legacyBuild;
  if (typeof flags.experimentalSsr === "boolean") {
    astroConfig.buildOptions.experimentalSsr = flags.experimentalSsr;
    if (flags.experimentalSsr) {
      astroConfig.buildOptions.legacyBuild = false;
    }
  }
  if (typeof flags.drafts === "boolean")
    astroConfig.buildOptions.drafts = flags.drafts;
  return astroConfig;
}
async function loadConfig(configOptions) {
  const root = configOptions.cwd ? path.resolve(configOptions.cwd) : process.cwd();
  const flags = resolveFlags(configOptions.flags || {});
  let userConfig = {};
  let userConfigPath;
  if (flags == null ? void 0 : flags.config) {
    userConfigPath = /^\.*\//.test(flags.config) ? flags.config : `./${flags.config}`;
    userConfigPath = fileURLToPath(new URL(userConfigPath, `file://${root}/`));
  }
  const config = await load("astro", { mustExist: false, cwd: root, filePath: userConfigPath });
  if (config) {
    userConfig = config.value;
  }
  const mergedConfig = mergeCLIFlags(userConfig, flags);
  const validatedConfig = await validateConfig(mergedConfig, root);
  return validatedConfig;
}
function formatConfigError(err) {
  const errorList = err.issues.map((issue) => `  ! ${colors.bold(issue.path.join("."))}  ${colors.red(issue.message + ".")}`);
  return `${colors.red("[config]")} Astro found issue(s) with your configuration:
${errorList.join("\n")}`;
}
export {
  AstroConfigSchema,
  formatConfigError,
  loadConfig,
  validateConfig
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvY29uZmlnLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBRWxCLE1BQU0sb0JBQW9CLEVBQUUsT0FBTztBQUFBLEVBQ3pDLGFBQWEsRUFDWCxPQUFPLEVBQ1AsU0FBUyxFQUNULFFBQVEsR0FBRyxFQUNYLFVBQVUsQ0FBQyxRQUFRLElBQUksSUFBSSxHQUFHLENBQUM7QUFBQSxFQUNqQyxLQUFLLEVBQ0gsT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLE9BQU8sRUFDZixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUksR0FBRyxDQUFDO0FBQUEsRUFDakMsT0FBTyxFQUNMLE9BQU8sRUFDUCxTQUFTLEVBQ1QsUUFBUSxhQUFhLEVBQ3JCLFVBQVUsQ0FBQyxRQUFRLElBQUksSUFBSSxHQUFHLENBQUM7QUFBQSxFQUNqQyxRQUFRLEVBQ04sT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLFVBQVUsRUFDbEIsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJLEdBQUcsQ0FBQztBQUFBLEVBQ2pDLE1BQU0sRUFDSixPQUFPLEVBQ1AsU0FBUyxFQUNULFFBQVEsUUFBUSxFQUNoQixVQUFVLENBQUMsUUFBUSxJQUFJLElBQUksR0FBRyxDQUFDO0FBQUEsRUFDakMsV0FBVyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLDRCQUE0Qix5QkFBeUIsMkJBQTJCLDBCQUEwQixDQUFDO0FBQUEsRUFDOUosaUJBQWlCLEVBQ2YsT0FBTztBQUFBLElBQ1AsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQztBQUFBLEVBQ3BFLENBQUMsRUFDQSxPQUFPLEVBQ1AsU0FBUyxFQUNULFFBQVEsQ0FBQyxDQUFDO0FBQUEsRUFDWixjQUFjLEVBQ1osT0FB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
