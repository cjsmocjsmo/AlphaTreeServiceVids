import stripAnsi from "strip-ansi";
import { bold, dim, red, green, underline, yellow, bgYellow, cyan, bgGreen, black } from "kleur/colors";
import { pad, emoji, getLocalAddress, getNetworkLogging } from "./dev/util.js";
import os from "os";
const PREFIX_PADDING = 6;
function req({ url, statusCode, reqTime }) {
  let color = dim;
  if (statusCode >= 500)
    color = red;
  else if (statusCode >= 400)
    color = yellow;
  else if (statusCode >= 300)
    color = dim;
  else if (statusCode >= 200)
    color = green;
  return `${bold(color(pad(`${statusCode}`, PREFIX_PADDING)))} ${pad(url, 40)} ${reqTime ? dim(Math.round(reqTime) + "ms") : ""}`.trim();
}
function reload({ file }) {
  return `${green(pad("reload", PREFIX_PADDING))} ${file}`;
}
function hmr({ file }) {
  return `${green(pad("update", PREFIX_PADDING))} ${file}`;
}
function devStart({
  startupTime,
  devServerAddressInfo,
  config,
  https,
  site
}) {
  const version = "0.24.0";
  const rootPath = site ? site.pathname : "/";
  const localPrefix = `${dim("\u2503")} Local    `;
  const networkPrefix = `${dim("\u2503")} Network  `;
  const { address: networkAddress, port } = devServerAddressInfo;
  const localAddress = getLocalAddress(networkAddress, config);
  const networkLogging = getNetworkLogging(config);
  const toDisplayUrl = (hostname) => `${https ? "https" : "http"}://${hostname}:${port}${rootPath}`;
  let addresses = [];
  if (networkLogging === "none") {
    addresses = [`${localPrefix}${bold(cyan(toDisplayUrl(localAddress)))}`];
  } else if (networkLogging === "host-to-expose") {
    addresses = [`${localPrefix}${bold(cyan(toDisplayUrl(localAddress)))}`, `${networkPrefix}${dim("use --host to expose")}`];
  } else {
    addresses = Object.values(os.networkInterfaces()).flatMap((networkInterface) => networkInterface ?? []).filter((networkInterface) => (networkInterface == null ? void 0 : networkInterface.address) && (networkInterface == null ? void 0 : networkInterface.family) === "IPv4").map(({ address }) => {
      if (address.includes("127.0.0.1")) {
        const displayAddress = address.replace("127.0.0.1", localAddress);
        return `${localPrefix}${bold(cyan(toDisplayUrl(displayAddress)))}`;
      } else {
        return `${networkPrefix}${bold(cyan(toDisplayUrl(address)))}`;
      }
    }).sort((msg) => msg.startsWith(localPrefix) ? -1 : 1);
  }
  const messages = [`${emoji("\u{1F680} ", "")}${bgGreen(black(` astro `))} ${green(`v${version}`)} ${dim(`started in ${Math.round(startupTime)}ms`)}`, "", ...addresses, ""];
  return messages.map((msg) => `  ${msg}`).join("\n");
}
function prerelease({ currentVersion }) {
  const tag = currentVersion.split("-").slice(1).join("-").replace(/\..*$/, "");
  const badge = bgYellow(black(` ${tag} `));
  const headline = yellow(`\u25B6 This is a ${badge} prerelease build`);
  const warning = `  Feedback? ${underline("https://astro.build/issues")}`;
  return [headline, warning, ""].map((msg) => `  ${msg}`).join("\n");
}
function portInUse({ port }) {
  return `Port ${port} in use. Trying a new one\u2026`;
}
function err(error) {
  if (!error.stack)
    return stripAnsi(error.message);
  let message = stripAnsi(error.message);
  let stack = stripAnsi(error.stack);
  const split = stack.indexOf(message) + message.length;
  message = stack.slice(0, split);
  stack = stack.slice(split).replace(/^\n+/, "");
  return `${message}
${dim(stack)}`;
}
export {
  devStart,
  err,
  hmr,
  portInUse,
  prerelease,
  reload,
  req
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2NvcmUvbWVzc2FnZXMudHMiXSwKICAibWFwcGluZ3MiOiAiQUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUlBLE1BQU0saUJBQWlCO0FBR2hCLGFBQWEsRUFBRSxLQUFLLFlBQVksV0FBMEU7QUFDaEgsTUFBSSxRQUFRO0FBQ1osTUFBSSxjQUFjO0FBQUssWUFBUTtBQUFBLFdBQ3RCLGNBQWM7QUFBSyxZQUFRO0FBQUEsV0FDM0IsY0FBYztBQUFLLFlBQVE7QUFBQSxXQUMzQixjQUFjO0FBQUssWUFBUTtBQUNwQyxTQUFPLEdBQUcsS0FBSyxNQUFNLElBQUksR0FBRyxjQUFjLGNBQWMsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBSyxVQUFVLElBQUksS0FBSyxNQUFNLE9BQU8sSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLO0FBQ3RJO0FBRU8sZ0JBQWdCLEVBQUUsUUFBa0M7QUFDMUQsU0FBTyxHQUFHLE1BQU0sSUFBSSxVQUFVLGNBQWMsQ0FBQyxLQUFLO0FBQ25EO0FBRU8sYUFBYSxFQUFFLFFBQWtDO0FBQ3ZELFNBQU8sR0FBRyxNQUFNLElBQUksVUFBVSxjQUFjLENBQUMsS0FBSztBQUNuRDtBQUdPLGtCQUFrQjtBQUFBLEVBQ3hCO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEdBT1U7QUFFVixRQUFNLFVBQVU7QUFDaEIsUUFBTSxXQUFXLE9BQU8sS0FBSyxXQUFXO0FBQ3hDLFFBQU0sY0FBYyxHQUFHLElBQUksUUFBRztBQUM5QixRQUFNLGdCQUFnQixHQUFHLElBQUksUUFBRztBQUVoQyxRQUFNLEVBQUUsU0FBUyxnQkFBZ0IsU0FBUztBQUMxQyxRQUFNLGVBQWUsZ0JBQWdCLGdCQUFnQixNQUFNO0FBQzNELFFBQU0saUJBQWlCLGtCQUFrQixNQUFNO0FBQy9DLFFBQU0sZUFBZSxDQUFDLGFBQXFCLEdBQUcsUUFBUSxVQUFVLFlBQVksWUFBWSxPQUFPO0FBQy9GLE1BQUksWUFBWSxDQUFDO0FBRWpCLE1BQUksbUJBQW1CLFFBQVE7QUFDOUIsZ0JBQVksQ0FBQyxHQUFHLGNBQWMsS0FBSyxLQUFLLGFBQWEsWUFBWSxDQUFDLENBQUMsR0FBRztBQUFBLEVBQ3ZFLFdBQVcsbUJBQW1CLGtCQUFrQjtBQUMvQyxnQkFBWSxDQUFDLEdBQUcsY0FBYyxLQUFLLEtBQUssYUFBYSxZQUFZLENBQUMsQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLElBQUksc0JBQXNCLEdBQUc7QUFBQSxFQUN6SCxPQUFPO0FBQ04sZ0JBQVksT0FBTyxPQUFPLEdBQUcsa0JBQWtCLENBQUMsRUFDOUMsUUFBUSxDQUFDLHFCQUFxQixvQkFBb0IsQ0FBQyxDQUFDLEVBQ3BELE9BQU8sQ0FBQyxxQkFBcUIsc0RBQWtCLFlBQVcsc0RBQWtCLFlBQVcsTUFBTSxFQUM3RixJQUFJLENBQUMsRUFBRSxjQUFjO0FBQ3JCLFVBQUksUUFBUSxTQUFTLFdBQVcsR0FBRztBQUNsQyxjQUFNLGlCQUFpQixRQUFRLFFBQVEsYUFBYSxZQUFZO0FBQ2hFLGVBQU8sR0FBRyxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsQ0FBQyxDQUFDO0FBQUEsTUFDaEUsT0FBTztBQUNOLGVBQU8sR0FBRyxnQkFBZ0IsS0FBSyxLQUFLLGFBQWEsT0FBTyxDQUFDLENBQUM7QUFBQSxNQUMzRDtBQUFBLElBQ0QsQ0FBQyxFQUVBLEtBQUssQ0FBQyxRQUFTLElBQUksV0FBVyxXQUFXLElBQUksS0FBSyxDQUFFO0FBQUEsRUFDdkQ7QUFFQSxRQUFNLFdBQVcsQ0FBQyxHQUFHLE1BQU0sY0FBTyxFQUFFLElBQUksUUFBUSxNQUFNLFNBQVMsQ0FBQyxLQUFLLE1BQU0sSUFBSSxTQUFTLEtBQUssSUFBSSxjQUFjLEtBQUssTUFBTSxXQUFXLEtBQUssS0FBSyxJQUFJLEdBQUcsV0FBVyxFQUFFO0FBQ25LLFNBQU8sU0FBUyxJQUFJLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRSxLQUFLLElBQUk7QUFDbkQ7QUFFTyxvQkFBb0IsRUFBRSxrQkFBOEM7QUFDMUUsUUFBTSxNQUFNLGVBQWUsTUFBTSxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQUUsUUFBUSxTQUFTLEVBQUU7QUFDNUUsUUFBTSxRQUFRLFNBQVMsTUFBTSxJQUFJLE1BQU0sQ0FBQztBQUN4QyxRQUFNLFdBQVcsT0FBTyxvQkFBZSx3QkFBd0I7QUFDL0QsUUFBTSxVQUFVLGVBQWUsVUFBVSw0QkFBNEI7QUFDckUsU0FBTyxDQUFDLFVBQVUsU0FBUyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUUsS0FBSyxJQUFJO0FBQ2xFO0FBR08sbUJBQW1CLEVBQUUsUUFBa0M7QUFDN0QsU0FBTyxRQUFRO0FBQ2hCO0FBR08sYUFBYSxPQUFzQjtBQUN6QyxNQUFJLENBQUMsTUFBTTtBQUFPLFdBQU8sVUFBVSxNQUFNLE9BQU87QUFDaEQsTUFBSSxVQUFVLFVBQVUsTUFBTSxPQUFPO0FBQ3JDLE1BQUksUUFBUSxVQUFVLE1BQU0sS0FBSztBQUNqQyxRQUFNLFFBQVEsTUFBTSxRQUFRLE9BQU8sSUFBSSxRQUFRO0FBQy9DLFlBQVUsTUFBTSxNQUFNLEdBQUcsS0FBSztBQUM5QixVQUFRLE1BQU0sTUFBTSxLQUFLLEVBQUUsUUFBUSxRQUFRLEVBQUU7QUFDN0MsU0FBTyxHQUFHO0FBQUEsRUFBWSxJQUFJLEtBQUs7QUFDaEM7IiwKICAibmFtZXMiOiBbXQp9Cg==
