import http from "http";
import sirv from "sirv";
import { performance } from "perf_hooks";
import { fileURLToPath } from "url";
import * as msg from "../messages.js";
import { error, info } from "../logger.js";
import { subpathNotUsedTemplate, notFoundTemplate } from "../../template/4xx.js";
import { getResolvedHostForHttpServer } from "./util.js";
const HAS_FILE_EXTENSION_REGEXP = /^.*\.[^\\]+$/;
async function preview(config, { logging }) {
  const startServerTime = performance.now();
  const defaultOrigin = "http://localhost";
  const trailingSlash = config.devOptions.trailingSlash;
  let baseURL = new URL(config.buildOptions.site || "/", defaultOrigin);
  const staticFileServer = sirv(fileURLToPath(config.dist), {
    dev: true,
    etag: true,
    maxAge: 0
  });
  const server = http.createServer((req, res) => {
    var _a;
    const requestURL = new URL(req.url, defaultOrigin);
    if (!requestURL.pathname.startsWith(baseURL.pathname)) {
      res.statusCode = 404;
      res.end(subpathNotUsedTemplate(baseURL.pathname, requestURL.pathname));
      return;
    }
    const pathname = requestURL.pathname.slice(baseURL.pathname.length - 1);
    const isRoot = pathname === "/";
    const hasTrailingSlash = isRoot || pathname.endsWith("/");
    function sendError(message) {
      res.statusCode = 404;
      res.end(notFoundTemplate(pathname, message));
    }
    switch (true) {
      case (hasTrailingSlash && trailingSlash == "never" && !isRoot):
        sendError('Not Found (devOptions.trailingSlash is set to "never")');
        return;
      case (!hasTrailingSlash && trailingSlash == "always" && !isRoot && !HAS_FILE_EXTENSION_REGEXP.test(pathname)):
        sendError('Not Found (devOptions.trailingSlash is set to "always")');
        return;
      default: {
        req.url = "/" + ((_a = req.url) == null ? void 0 : _a.replace(baseURL.pathname, ""));
        staticFileServer(req, res, () => sendError("Not Found"));
        return;
      }
    }
  });
  let { port } = config.devOptions;
  const host = getResolvedHostForHttpServer(config);
  let httpServer;
  function startServer(timerStart) {
    let showedPortTakenMsg = false;
    let showedListenMsg = false;
    return new Promise((resolve, reject) => {
      const listen = () => {
        httpServer = server.listen(port, host, async () => {
          if (!showedListenMsg) {
            const devServerAddressInfo = server.address();
            info(logging, null, msg.devStart({ startupTime: performance.now() - timerStart, config, devServerAddressInfo, https: false, site: baseURL }));
          }
          showedListenMsg = true;
          resolve();
        });
        httpServer == null ? void 0 : httpServer.on("error", onError);
      };
      const onError = (err) => {
        if (err.code && err.code === "EADDRINUSE") {
          if (!showedPortTakenMsg) {
            info(logging, "astro", msg.portInUse({ port }));
            showedPortTakenMsg = true;
          }
          port++;
          return listen();
        } else {
          error(logging, "astro", err.stack);
          httpServer == null ? void 0 : httpServer.removeListener("error", onError);
          reject(err);
        }
      };
      listen();
    });
  }
  await startServer(startServerTime);
  return {
    host,
    port,
    server: httpServer,
    stop: async () => {
      await new Promise((resolve, reject) => {
        httpServer.close((err) => err ? reject(err) : resolve(void 0));
      });
    }
  };
}
export {
  preview as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvcmUvcHJldmlldy9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQSxNQUFNLDRCQUE0QjtBQUdsQyx1QkFBc0MsUUFBcUIsRUFBRSxXQUFtRDtBQUMvRyxRQUFNLGtCQUFrQixZQUFZLElBQUk7QUFDeEMsUUFBTSxnQkFBZ0I7QUFDdEIsUUFBTSxnQkFBZ0IsT0FBTyxXQUFXO0FBRXhDLE1BQUksVUFBVSxJQUFJLElBQUksT0FBTyxhQUFhLFFBQVEsS0FBSyxhQUFhO0FBQ3BFLFFBQU0sbUJBQW1CLEtBQUssY0FBYyxPQUFPLElBQUksR0FBRztBQUFBLElBQ3pELEtBQUs7QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQSxFQUNULENBQUM7QUFFRCxRQUFNLFNBQVMsS0FBSyxhQUFhLENBQUMsS0FBSyxRQUFRO0FBdENoRDtBQXVDRSxVQUFNLGFBQWEsSUFBSSxJQUFJLElBQUksS0FBZSxhQUFhO0FBRzNELFFBQUksQ0FBQyxXQUFXLFNBQVMsV0FBVyxRQUFRLFFBQVEsR0FBRztBQUN0RCxVQUFJLGFBQWE7QUFDakIsVUFBSSxJQUFJLHVCQUF1QixRQUFRLFVBQVUsV0FBVyxRQUFRLENBQUM7QUFDckU7QUFBQSxJQUNEO0FBR0EsVUFBTSxXQUFXLFdBQVcsU0FBUyxNQUFNLFFBQVEsU0FBUyxTQUFTLENBQUM7QUFFdEUsVUFBTSxTQUFTLGFBQWE7QUFDNUIsVUFBTSxtQkFBbUIsVUFBVSxTQUFTLFNBQVMsR0FBRztBQUV4RCx1QkFBbUIsU0FBaUI7QUFDbkMsVUFBSSxhQUFhO0FBQ2pCLFVBQUksSUFBSSxpQkFBaUIsVUFBVSxPQUFPLENBQUM7QUFBQSxJQUM1QztBQUVBLFlBQVE7QUFBQSxXQUNGLHFCQUFvQixpQkFBaUIsV0FBVyxDQUFDO0FBQ3JELGtCQUFVLHdEQUF3RDtBQUNsRTtBQUFBLFdBQ0ksRUFBQyxvQkFBb0IsaUJBQWlCLFlBQVksQ0FBQyxVQUFVLENBQUMsMEJBQTBCLEtBQUssUUFBUTtBQUN6RyxrQkFBVSx5REFBeUQ7QUFDbkU7QUFBQSxlQUNRO0FBRVIsWUFBSSxNQUFNLE1BQU0sV0FBSSxRQUFKLG1CQUFTLFFBQVEsUUFBUSxVQUFVO0FBQ25ELHlCQUFpQixLQUFLLEtBQUssTUFBTSxVQUFVLFdBQVcsQ0FBQztBQUN2RDtBQUFBLE1BQ0Q7QUFBQTtBQUFBLEVBRUYsQ0FBQztBQUVELE1BQUksRUFBRSxTQUFTLE9BQU87QUFDdEIsUUFBTSxPQUFPLDZCQUE2QixNQUFNO0FBRWhELE1BQUk7QUFHSix1QkFBcUIsWUFBbUM7QUFDdkQsUUFBSSxxQkFBcUI7QUFDekIsUUFBSSxrQkFBa0I7QUFDdEIsV0FBTyxJQUFJLFFBQWMsQ0FBQyxTQUFTLFdBQVc7QUFDN0MsWUFBTSxTQUFTLE1BQU07QUFDcEIscUJBQWEsT0FBTyxPQUFPLE1BQU0sTUFBTSxZQUFZO0FBQ2xELGNBQUksQ0FBQyxpQkFBaUI7QUFDckIsa0JBQU0sdUJBQXVCLE9BQU8sUUFBUTtBQUM1QyxpQkFBSyxTQUFTLE1BQU0sSUFBSSxTQUFTLEVBQUUsYUFBYSxZQUFZLElBQUksSUFBSSxZQUFZLFFBQVEsc0JBQXNCLE9BQU8sT0FBTyxNQUFNLFFBQVEsQ0FBQyxDQUFDO0FBQUEsVUFDN0k7QUFDQSw0QkFBa0I7QUFDbEIsa0JBQVE7QUFBQSxRQUNULENBQUM7QUFDRCxpREFBWSxHQUFHLFNBQVM7QUFBQSxNQUN6QjtBQUVBLFlBQU0sVUFBVSxDQUFDLFFBQStCO0FBQy9DLFlBQUksSUFBSSxRQUFRLElBQUksU0FBUyxjQUFjO0FBQzFDLGNBQUksQ0FBQyxvQkFBb0I7QUFDeEIsaUJBQUssU0FBUyxTQUFTLElBQUksVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzlDLGlDQUFxQjtBQUFBLFVBQ3RCO0FBQ0E7QUFDQSxpQkFBTyxPQUFPO0FBQUEsUUFDZixPQUFPO0FBQ04sZ0JBQU0sU0FBUyxTQUFTLElBQUksS0FBSztBQUNqQyxtREFBWSxlQUFlLFNBQVM7QUFDcEMsaUJBQU8sR0FBRztBQUFBLFFBQ1g7QUFBQSxNQUNEO0FBRUEsYUFBTztBQUFBLElBQ1IsQ0FBQztBQUFBLEVBQ0Y7QUFHQSxRQUFNLFlBQVksZUFBZTtBQUVqQyxTQUFPO0FBQUEsSUFDTjtBQUFBLElBQ0E7QUFBQSxJQUNBLFFBQVE7QUFBQSxJQUNSLE1BQU0sWUFBWTtBQUNqQixZQUFNLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUN0QyxtQkFBVyxNQUFNLENBQUMsUUFBUyxNQUFNLE9BQU8sR0FBRyxJQUFJLFFBQVEsTUFBUyxDQUFFO0FBQUEsTUFDbkUsQ0FBQztBQUFBLElBQ0Y7QUFBQSxFQUNEO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
