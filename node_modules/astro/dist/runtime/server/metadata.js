import { hydrationSpecifier } from "./util.js";
class Metadata {
  constructor(filePathname, opts) {
    this.modules = opts.modules;
    this.hoisted = opts.hoisted;
    this.hydratedComponents = opts.hydratedComponents;
    this.clientOnlyComponents = opts.clientOnlyComponents;
    this.hydrationDirectives = opts.hydrationDirectives;
    this.mockURL = new URL(filePathname, "http://example.com");
    this.metadataCache = /* @__PURE__ */ new Map();
  }
  resolvePath(specifier) {
    return specifier.startsWith(".") ? new URL(specifier, this.mockURL).pathname : specifier;
  }
  getPath(Component) {
    const metadata = this.getComponentMetadata(Component);
    return (metadata == null ? void 0 : metadata.componentUrl) || null;
  }
  getExport(Component) {
    const metadata = this.getComponentMetadata(Component);
    return (metadata == null ? void 0 : metadata.componentExport) || null;
  }
  *hydratedComponentPaths() {
    const found = /* @__PURE__ */ new Set();
    for (const metadata of this.deepMetadata()) {
      for (const component of metadata.hydratedComponents) {
        const path = metadata.getPath(component);
        if (path && !found.has(path)) {
          found.add(path);
          yield path;
        }
      }
    }
  }
  *clientOnlyComponentPaths() {
    const found = /* @__PURE__ */ new Set();
    for (const metadata of this.deepMetadata()) {
      for (const component of metadata.clientOnlyComponents) {
        const path = metadata.resolvePath(component);
        if (path && !found.has(path)) {
          found.add(path);
          yield path;
        }
      }
    }
  }
  *hydrationDirectiveSpecifiers() {
    const found = /* @__PURE__ */ new Set();
    for (const metadata of this.deepMetadata()) {
      for (const directive of metadata.hydrationDirectives) {
        if (!found.has(directive)) {
          found.add(directive);
          yield hydrationSpecifier(directive);
        }
      }
    }
  }
  *hoistedScriptPaths() {
    for (const metadata of this.deepMetadata()) {
      let i = 0, pathname = metadata.mockURL.pathname;
      while (i < metadata.hoisted.length) {
        yield `${pathname}?astro&type=script&index=${i}`;
        i++;
      }
    }
  }
  *deepMetadata() {
    yield this;
    const seen = /* @__PURE__ */ new Set();
    for (const { module: mod } of this.modules) {
      if (typeof mod.$$metadata !== "undefined") {
        const md = mod.$$metadata;
        for (const childMetdata of md.deepMetadata()) {
          if (!seen.has(childMetdata)) {
            seen.add(childMetdata);
            yield childMetdata;
          }
        }
      }
    }
  }
  getComponentMetadata(Component) {
    if (this.metadataCache.has(Component)) {
      return this.metadataCache.get(Component);
    }
    const metadata = this.findComponentMetadata(Component);
    this.metadataCache.set(Component, metadata);
    return metadata;
  }
  findComponentMetadata(Component) {
    const isCustomElement = typeof Component === "string";
    for (const { module, specifier } of this.modules) {
      const id = this.resolvePath(specifier);
      for (const [key, value] of Object.entries(module)) {
        if (isCustomElement) {
          if (key === "tagName" && Component === value) {
            return {
              componentExport: key,
              componentUrl: id
            };
          }
        } else if (Component === value) {
          return {
            componentExport: key,
            componentUrl: id
          };
        }
      }
    }
    return null;
  }
}
function createMetadata(filePathname, options) {
  return new Metadata(filePathname, options);
}
export {
  Metadata,
  createMetadata
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL3J1bnRpbWUvc2VydmVyL21ldGFkYXRhLnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFvQk8sTUFBTSxTQUFTO0FBQUEsRUFVckIsWUFBWSxjQUFzQixNQUE2QjtBQUM5RCxTQUFLLFVBQVUsS0FBSztBQUNwQixTQUFLLFVBQVUsS0FBSztBQUNwQixTQUFLLHFCQUFxQixLQUFLO0FBQy9CLFNBQUssdUJBQXVCLEtBQUs7QUFDakMsU0FBSyxzQkFBc0IsS0FBSztBQUNoQyxTQUFLLFVBQVUsSUFBSSxJQUFJLGNBQWMsb0JBQW9CO0FBQ3pELFNBQUssZ0JBQWdCLG9CQUFJLElBQW1DO0FBQUEsRUFDN0Q7QUFBQSxFQUVBLFlBQVksV0FBMkI7QUFDdEMsV0FBTyxVQUFVLFdBQVcsR0FBRyxJQUFJLElBQUksSUFBSSxXQUFXLEtBQUssT0FBTyxFQUFFLFdBQVc7QUFBQSxFQUNoRjtBQUFBLEVBRUEsUUFBUSxXQUErQjtBQUN0QyxVQUFNLFdBQVcsS0FBSyxxQkFBcUIsU0FBUztBQUNwRCxXQUFPLHNDQUFVLGlCQUFnQjtBQUFBLEVBQ2xDO0FBQUEsRUFFQSxVQUFVLFdBQStCO0FBQ3hDLFVBQU0sV0FBVyxLQUFLLHFCQUFxQixTQUFTO0FBQ3BELFdBQU8sc0NBQVUsb0JBQW1CO0FBQUEsRUFDckM7QUFBQSxHQU1DLHlCQUF5QjtBQUN6QixVQUFNLFFBQVEsb0JBQUksSUFBWTtBQUM5QixlQUFXLFlBQVksS0FBSyxhQUFhLEdBQUc7QUFDM0MsaUJBQVcsYUFBYSxTQUFTLG9CQUFvQjtBQUNwRCxjQUFNLE9BQU8sU0FBUyxRQUFRLFNBQVM7QUFDdkMsWUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksR0FBRztBQUM3QixnQkFBTSxJQUFJLElBQUk7QUFDZCxnQkFBTTtBQUFBLFFBQ1A7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxHQUVDLDJCQUEyQjtBQUMzQixVQUFNLFFBQVEsb0JBQUksSUFBWTtB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
