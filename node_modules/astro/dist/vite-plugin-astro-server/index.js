import { info, warn, error } from "../core/logger.js";
import { getParamsAndProps, GetParamsAndPropsError } from "../core/render/core.js";
import { createRouteManifest, matchRoute } from "../core/routing/index.js";
import stripAnsi from "strip-ansi";
import { createSafeError } from "../core/util.js";
import { ssr, preload } from "../core/render/dev/index.js";
import * as msg from "../core/messages.js";
import notFoundTemplate, { subpathNotUsedTemplate } from "../template/4xx.js";
import serverErrorTemplate from "../template/5xx.js";
import { RouteCache } from "../core/render/route-cache.js";
const BAD_VITE_MIDDLEWARE = ["viteIndexHtmlMiddleware", "vite404Middleware", "viteSpaFallbackMiddleware"];
function removeViteHttpMiddleware(server) {
  for (let i = server.stack.length - 1; i > 0; i--) {
    if (BAD_VITE_MIDDLEWARE.includes(server.stack[i].handle.name)) {
      server.stack.splice(i, 1);
    }
  }
}
function writeHtmlResponse(res, statusCode, html) {
  res.writeHead(statusCode, {
    "Content-Type": "text/html; charset=utf-8",
    "Content-Length": Buffer.byteLength(html, "utf-8")
  });
  res.write(html);
  res.end();
}
async function handle404Response(origin, config, req, res) {
  const site = config.buildOptions.site ? new URL(config.buildOptions.site) : void 0;
  const devRoot = site ? site.pathname : "/";
  const pathname = decodeURI(new URL(origin + req.url).pathname);
  let html = "";
  if (pathname === "/" && !pathname.startsWith(devRoot)) {
    html = subpathNotUsedTemplate(devRoot, pathname);
  } else {
    html = notFoundTemplate({ statusCode: 404, title: "Not found", tabTitle: "404: Not Found", pathname });
  }
  writeHtmlResponse(res, 404, html);
}
async function handle500Response(viteServer, origin, req, res, err) {
  const pathname = decodeURI(new URL(origin + req.url).pathname);
  const html = serverErrorTemplate({
    statusCode: 500,
    title: "Internal Error",
    tabTitle: "500: Error",
    message: stripAnsi(err.message),
    url: err.url || void 0,
    stack: stripAnsi(err.stack)
  });
  const transformedHtml = await viteServer.transformIndexHtml(pathname, html, pathname);
  writeHtmlResponse(res, 500, transformedHtml);
}
function getCustom404Route(config, manifest) {
  const relPages = config.pages.href.replace(config.projectRoot.href, "");
  return manifest.routes.find((r) => r.component === relPages + "404.astro");
}
function log404(logging, pathname) {
  info(logging, "serve", msg.req({ url: pathname, statusCode: 404 }));
}
async function handleRequest(routeCache, viteServer, logging, manifest, config, req, res) {
  const reqStart = performance.now();
  const site = config.buildOptions.site ? new URL(config.buildOptions.site) : void 0;
  const devRoot = site ? site.pathname : "/";
  const origin = `${viteServer.config.server.https ? "https" : "http"}://${req.headers.host}`;
  const pathname = decodeURI(new URL(origin + req.url).pathname);
  const rootRelativeUrl = pathname.substring(devRoot.length - 1);
  try {
    if (!pathname.startsWith(devRoot)) {
      log404(logging, pathname);
      return handle404Response(origin, config, req, res);
    }
    let route = matchRoute(rootRelativeUrl, manifest);
    const statusCode = route ? 200 : 404;
    if (!route) {
      log404(logging, pathname);
      const custom404 = getCustom404Route(config, manifest);
      if (custom404) {
        route = custom404;
      } else {
        return handle404Response(origin, config, req, res);
      }
    }
    const filePath = new URL(`./${route.component}`, config.projectRoot);
    const preloadedComponent = await preload({ astroConfig: config, filePath, viteServer });
    const [, mod] = preloadedComponent;
    const paramsAndPropsRes = await getParamsAndProps({
      mod,
      route,
      routeCache,
      pathname: rootRelativeUrl,
      logging
    });
    if (paramsAndPropsRes === GetParamsAndPropsError.NoMatchingStaticPath) {
      warn(logging, "getStaticPaths", `Route pattern matched, but no matching static path found. (${pathname})`);
      log404(logging, pathname);
      const routeCustom404 = getCustom404Route(config, manifest);
      if (routeCustom404) {
        const filePathCustom404 = new URL(`./${routeCustom404.component}`, config.projectRoot);
        const preloadedCompCustom404 = await preload({ astroConfig: config, filePath: filePathCustom404, viteServer });
        const html2 = await ssr(preloadedCompCustom404, {
          astroConfig: config,
          filePath: filePathCustom404,
          logging,
          mode: "development",
          origin,
          pathname: rootRelativeUrl,
          route: routeCustom404,
          routeCache,
          viteServer
        });
        return writeHtmlResponse(res, statusCode, html2);
      } else {
        return handle404Response(origin, config, req, res);
      }
    }
    const html = await ssr(preloadedComponent, {
      astroConfig: config,
      filePath,
      logging,
      mode: "development",
      origin,
      pathname: rootRelativeUrl,
      route,
      routeCache,
      viteServer
    });
    writeHtmlResponse(res, statusCode, html);
  } catch (_err) {
    info(logging, "serve", msg.req({ url: pathname, statusCode: 500 }));
    const err = createSafeError(_err);
    error(logging, "error", msg.err(err));
    handle500Response(viteServer, origin, req, res, err);
  }
}
function createPlugin({ config, logging }) {
  return {
    name: "astro:server",
    configureServer(viteServer) {
      let routeCache = new RouteCache(logging);
      let manifest = createRouteManifest({ config }, logging);
      function rebuildManifest(needsManifestRebuild, file) {
        routeCache.clearAll();
        if (needsManifestRebuild) {
          manifest = createRouteManifest({ config }, logging);
        }
      }
      viteServer.watcher.on("add", rebuildManifest.bind(null, true));
      viteServer.watcher.on("unlink", rebuildManifest.bind(null, true));
      viteServer.watcher.on("change", rebuildManifest.bind(null, false));
      return () => {
        removeViteHttpMiddleware(viteServer.middlewares);
        viteServer.middlewares.use(async (req, res) => {
          if (!req.url || !req.method) {
            throw new Error("Incomplete request");
          }
          handleRequest(routeCache, viteServer, logging, manifest, config, req, res);
        });
      };
    }
  };
}
export {
  createPlugin as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWFzdHJvLXNlcnZlci9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBT0EsTUFBTSxzQkFBc0IsQ0FBQywyQkFBMkIscUJBQXFCLDJCQUEyQjtBQUN4RyxrQ0FBa0MsUUFBNkI7QUFDOUQsV0FBUyxJQUFJLE9BQU8sTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFFakQsUUFBSSxvQkFBb0IsU0FBUyxPQUFPLE1BQU0sR0FBRyxPQUFPLElBQUksR0FBRztBQUM5RCxhQUFPLE1BQU0sT0FBTyxHQUFHLENBQUM7QUFBQSxJQUN6QjtBQUFBLEVBQ0Q7QUFDRDtBQUVBLDJCQUEyQixLQUEwQixZQUFvQixNQUFjO0FBQ3RGLE1BQUksVUFBVSxZQUFZO0FBQUEsSUFDekIsZ0JBQWdCO0FBQUEsSUFDaEIsa0JBQWtCLE9BQU8sV0FBVyxNQUFNLE9BQU87QUFBQSxFQUNsRCxDQUFDO0FBQ0QsTUFBSSxNQUFNLElBQUk7QUFDZCxNQUFJLElBQUk7QUFDVDtBQUVBLGlDQUFpQyxRQUFnQixRQUFxQixLQUEyQixLQUEwQjtBQUMxSCxRQUFNLE9BQU8sT0FBTyxhQUFhLE9BQU8sSUFBSSxJQUFJLE9BQU8sYUFBYSxJQUFJLElBQUk7QUFDNUUsUUFBTSxVQUFVLE9BQU8sS0FBSyxXQUFXO0FBQ3ZDLFFBQU0sV0FBVyxVQUFVLElBQUksSUFBSSxTQUFTLElBQUksR0FBRyxFQUFFLFFBQVE7QUFDN0QsTUFBSSxPQUFPO0FBQ1gsTUFBSSxhQUFhLE9BQU8sQ0FBQyxTQUFTLFdBQVcsT0FBTyxHQUFHO0FBQ3RELFdBQU8sdUJBQXVCLFNBQVMsUUFBUTtBQUFBLEVBQ2hELE9BQU87QUFDTixXQUFPLGlCQUFpQixFQUFFLFlBQVksS0FBSyxPQUFPLGFBQWEsVUFBVSxrQkFBa0IsU0FBUyxDQUFDO0FBQUEsRUFDdEc7QUFDQSxvQkFBa0IsS0FBSyxLQUFLLElBQUk7QUFDakM7QUFFQSxpQ0FBaUMsWUFBZ0MsUUFBZ0IsS0FBMkIsS0FBMEIsS0FBVTtBQUMvSSxRQUFNLFdBQVcsVUFBVSxJQUFJLElBQUksU0FBUyxJQUFJLEdBQUcsRUFBRSxRQUFRO0FBQzdELFFBQU0sT0FBTyxvQkFBb0I7QUFBQSxJQUNoQyxZQUFZO0FBQUEsSUFDWixPQUFPO0FBQUEsSUFDUCxVQUFVO0FBQUEsSUFDVixTQUFTLFVBQVUsSUFBSSxPQUFPO0FBQUEsSUFDOUIsS0FBSyxJQUFJLE9BQU87QUFBQSxJQUNoQixPQUFPLFVBQVUsSUFBSSxLQUFLO0FBQUEsRUFDM0IsQ0FBQztBQUNELFFBQU0sa0JBQWtCLE1BQU0sV0FBVyxtQkFBbUIsVUFBVSxNQUFNLFFBQVE7QUFDcEYsb0JBQWtCLEtBQUssS0FBSyxlQUFlO0FBQzVDO0FBRUEsMkJBQTJCLFFBQXFCLFVBQXdCO0FBQ3ZFLFFBQU0sV0FBVyxPQUFPLE1BQU0sS0FBSyxRQUFRLE9BQU8sWUFBWSxNQUFNLEVBQUU7QUFDdEUsU0FBTyxTQUFTLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxjQUFjLFdBQVcsV0FBVztBQUMxRTtBQUVBLGdCQUFnQixTQUFxQixVQUFrQjtBQUN0RCxPQUFLLFNBQVMsU0FBUyxJQUFJLElBQUksRUFBRSxLQUFLLFVBQVUsWUFBWSxJQUFJLENBQUMsQ0FBQztBQUNuRTtBQUdBLDZCQUNDLFlBQ0EsWUFDQSxTQUNBLFVBQ0EsUUFDQSxLQUNBLEtBQ0M7QUFDRCxRQUFNLFdBQVcsWUFBWSxJQUFJO0FBQ2pDLFFBQU0sT0FBTyxPQUFPLGFBQWEsT0FBTyxJQUFJLElBQUksT0FBTyxhQUFhLElBQUksSUFBSTtBQUM1RSxRQUFNLFVBQVUsT0FBTyxLQUFLLFdBQVc7QUFDdkMsUUFBTSxTQUFTLEdBQUcsV0FBVyxPQUFPLE9BQU8sUUFBUSxVQUFVLFlBQVksSUFBSSxRQUFRO0FBQ3JGLFFBQU0sV0FBVyxVQUFVLElBQUksSUFBSSxTQUFTLElBQUksR0FBRyxFQUFFLFFBQVE7QUFDN0QsUUFBTSxrQkFBa0IsU0FBUyxVQUFVLFFBQVEsU0FBUyxDQUFDO0FBRTdELE1BQUk7QUFDSCxRQUFJLENBQUMsU0FBUyxXQUFXLE9BQU8sR0FBRztBQUNsQyxhQUFPLFNBQVMsUUFBUTtBQUN4QixhQUFPLGtCQUFrQixRQUFRLFFBQVEsS0FBSyxHQUFHO0FBQUEsSUFDbEQ7QUFHQSxRQUFJLFFBQVEsV0FBVyxpQkFBaUIsUUFBUTtBQUNoRCxVQUFNLGFBQWEsUUFBUSxNQUFNO0FBRWpDLFFBQUksQ0FBQyxPQUFPO0FBQ1gsYUFBTyxTQUFTLFFBQVE7QUFDeEIsWUFBTSxZQUFZLGtCQUFrQixRQUFRLFFBQVE7QUFDcEQsVUFBSSxXQUFXO0FBQ2QsZ0JBQVE7QUFBQSxNQUNULE9BQU87QUFDTixlQUFPLGtCQUFrQixRQUFRLFFBQVEsS0FBSyxHQUFHO0FBQUEsTUFDbEQ7QUFBQSxJQUNEO0FBRUEsVUFBTSxXQUFXLElBQUksSUFBSSxLQUFLLE1BQU0sYUFBYSxPQUFPLFdBQVc7QUFDbkUsVUFBTSxxQkFBcUIsTUFBTSxRQUFRLEVBQUUsYUFBYSxRQUFRLFVBQVUsV0FBVyxDQUFDO0FBQ3RGLFVBQU0sQ0FBQyxFQUFFLE9BQU87QUFHaEIsVUFBTSxvQkFBb0IsTUFBTSxrQkFBa0I7QUFBQSxNQUNqRDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxVQUFVO0FBQUEsTUFDVjtBQUFBLElBQ0QsQ0FBQztBQUNELFFBQUksc0JBQXNCLHVCQUF1QixzQkFBc0I7QUFDdEUsV0FBSyxTQUFTLGtCQUFrQiw4REFBOEQsV0FBVztBQUN6RyxhQUFPLFNBQVMsUUFBUTtBQUN4QixZQUFNLGlCQUFpQixrQkFBa0IsUUFBUSxRQUFRO0FBQ3pELFVBQUksZ0JBQWdCO0FBQ25CLGNBQU0sb0JBQW9CLElBQUksSUFBSSxLQUFLLGVBQWUsYUFBYSxPQUFPLFdBQVc7QUFDckYsY0FBTSx5QkFBeUIsTUFBTSxRQUFRLEVBQUUsYUFBYSxRQUFRLFVBQVUsbUJBQW1CLFdBQVcsQ0FBQztBQUM3RyxjQUFNLFFBQU8sTUFBTSxJQUFJLHdCQUF3QjtBQUFBLFVBQzlDLGFBQWE7QUFBQSxVQUNiLFVBQVU7QUFBQSxVQUNWO0FBQUEsVUFDQSxNQUFNO0FBQUEsVUFDTjtBQUFBLFVBQ0EsVUFBVTtBQUFBLFVBQ1YsT0FBTztBQUFBLFVBQ1A7QUFBQSxVQUNBO0FBQUEsUUFDRCxDQUFDO0FBQ0QsZUFBTyxrQkFBa0IsS0FBSyxZQUFZLEtBQUk7QUFBQSxNQUMvQyxPQUFPO0FBQ04sZUFBTyxrQkFBa0IsUUFBUSxRQUFRLEtBQUssR0FBRztBQUFBLE1BQ2xEO0FBQUEsSUFDRDtBQUVBLFVBQU0sT0FBTyxNQUFNLElBQUksb0JBQW9CO0FBQUEsTUFDMUMsYUFBYTtBQUFBLE1BQ2I7QUFBQSxNQUNBO0FBQUEsTUFDQSxNQUFNO0FBQUEsTUFDTjtBQUFBLE1BQ0EsVUFBVTtBQUFBLE1BQ1Y7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0QsQ0FBQztBQUNELHNCQUFrQixLQUFLLFlBQVksSUFBSTtBQUFBLEVBQ3hDLFNBQVMsTUFBUDtBQUNELFNBQUssU0FBUyxTQUFTLElBQUksSUFBSSxFQUFFLEtBQUssVUFBVSxZQUFZLElBQUksQ0FBQyxDQUFDO0FBQ2xFLFVBQU0sTUFBTSxnQkFBZ0IsSUFBSTtBQUNoQyxVQUFNLFNBQVMsU0FBUyxJQUFJLElBQUksR0FBRyxDQUFDO0FBQ3BDLHNCQUFrQixZQUFZLFFBQVEsS0FBSyxLQUFLLEdBQUc7QUFBQSxFQUNwRDtBQUNEO0FBRWUsc0JBQXNCLEVBQUUsUUFBUSxXQUE0QztBQUMxRixTQUFPO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixnQkFBZ0IsWUFBWTtBQUMzQixVQUFJLGFBQWEsSUFBSSxXQUFXLE9BQU87QUFDdkMsVUFBSSxXQUF5QixvQkFBb0IsRUFBRSxPQUFlLEdBQUcsT0FBTztBQUU1RSwrQkFBeUIsc0JBQStCLE1BQWM7QUFDckUsbUJBQVcsU0FBUztBQUNwQixZQUFJLHNCQUFzQjtBQUN6QixxQkFBVyxvQkFBb0IsRUFBRSxPQUFlLEdBQUcsT0FBTztBQUFBLFFBQzNEO0FBQUEsTUFDRDtBQUVBLGlCQUFXLFFBQVEsR0FBRyxPQUFPLGdCQUFnQixLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQzdELGlCQUFXLFFBQVEsR0FBRyxVQUFVLGdCQUFnQixLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQ2hFLGlCQUFXLFFBQVEsR0FBRyxVQUFVLGdCQUFnQixLQUFLLE1BQU0sS0FBSyxDQUFDO0FBQ2pFLGFBQU8sTUFBTTtBQUNaLGlDQUF5QixXQUFXLFdBQVc7QUFDL0MsbUJBQVcsWUFBWSxJQUFJLE9BQU8sS0FBSyxRQUFRO0FBQzlDLGNBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLFFBQVE7QUFDNUIsa0JBQU0sSUFBSSxNQUFNLG9CQUFvQjtBQUFBLFVBQ3JDO0FBQ0Esd0JBQWMsWUFBWSxZQUFZLFNBQVMsVUFBVSxRQUFRLEtBQUssR0FBRztBQUFBLFFBQzFFLENBQUM7QUFBQSxNQUNGO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
